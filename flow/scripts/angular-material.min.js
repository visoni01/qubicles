/***************************************************************************************
 * @license
 *                                      Fenero Flow
 *                              Copyright 2016. Fenero, Inc.
 *                                   All rights reserved.
 *                                    by: Marlon Williams
 *
 * NOTICE:  All information contained herein is, and remains the property of Fenero Inc.
 * The intellectual and technical concepts contained herein are proprietary to Fenero Inc
 * and its subsidiaries and are covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden.
 ****************************************************************************************/

// hook up our dom ready
angular.element(document).ready(function () {
    // void jquery's default destroy function
    jQuery.ui.draggable.prototype.destroy = function (ul, item) { };
});

// module to support binding to check boxes similar to radio buttons
angular.module('checklist-model', [])
.directive('checklistModel', ['$parse', '$compile', function($parse, $compile) {
  // contains
  function contains(arr, item, comparator) {
    if (angular.isArray(arr)) {
      for (var i = arr.length; i--;) {
        if (comparator(arr[i], item)) {
          return true;
        }
      }
    }
    return false;
  }

  // add
  function add(arr, item, comparator) {
    arr = angular.isArray(arr) ? arr : [];
      if(!contains(arr, item, comparator)) {
          arr.push(item);
      }
    return arr;
  }

  // remove
  function remove(arr, item, comparator) {
    if (angular.isArray(arr)) {
      for (var i = arr.length; i--;) {
        if (comparator(arr[i], item)) {
          arr.splice(i, 1);
          break;
        }
      }
    }
    return arr;
  }

  // http://stackoverflow.com/a/19228302/1458162
  function postLinkFn(scope, elem, attrs) {
     // exclude recursion, but still keep the model
    var checklistModel = attrs.checklistModel;
    attrs.$set("checklistModel", null);
    // compile with `ng-model` pointing to `checked`
    $compile(elem)(scope);
    attrs.$set("checklistModel", checklistModel);

    // getter / setter for original model
    var getter = $parse(checklistModel);
    var setter = getter.assign;
    var checklistChange = $parse(attrs.checklistChange);
    var checklistBeforeChange = $parse(attrs.checklistBeforeChange);

    // value added to list
    var value = attrs.checklistValue ? $parse(attrs.checklistValue)(scope.$parent) : attrs.value;


    var comparator = angular.equals;

    if (attrs.hasOwnProperty('checklistComparator')){
      if (attrs.checklistComparator[0] == '.') {
        var comparatorExpression = attrs.checklistComparator.substring(1);
        comparator = function (a, b) {
          return a[comparatorExpression] === b[comparatorExpression];
        };

      } else {
        comparator = $parse(attrs.checklistComparator)(scope.$parent);
      }
    }

    // watch UI checked change
    scope.$watch(attrs.ngModel, function(newValue, oldValue) {
      if (newValue === oldValue) {
        return;
      }

      if (checklistBeforeChange && (checklistBeforeChange(scope) === false)) {
        scope[attrs.ngModel] = contains(getter(scope.$parent), value, comparator);
        return;
      }

      setValueInChecklistModel(value, newValue);

      if (checklistChange) {
        checklistChange(scope);
      }
    });

    function setValueInChecklistModel(value, checked) {
      var current = getter(scope.$parent);
      if (angular.isFunction(setter)) {
        if (checked === true) {
          setter(scope.$parent, add(current, value, comparator));
        } else {
          setter(scope.$parent, remove(current, value, comparator));
        }
      }

    }

    // declare one function to be used for both $watch functions
    function setChecked(newArr, oldArr) {
      if (checklistBeforeChange && (checklistBeforeChange(scope) === false)) {
        setValueInChecklistModel(value, scope[attrs.ngModel]);
        return;
      }
      scope[attrs.ngModel] = contains(newArr, value, comparator);
    }

    // watch original model change
    // use the faster $watchCollection method if it's available
    if (angular.isFunction(scope.$parent.$watchCollection)) {
        scope.$parent.$watchCollection(checklistModel, setChecked);
    } else {
        scope.$parent.$watch(checklistModel, setChecked, true);
    }
  }

  return {
    restrict: 'A',
    priority: 1000,
    terminal: true,
    scope: true,
    compile: function(tElement, tAttrs) {
      if ((tElement[0].tagName !== 'INPUT' || tAttrs.type !== 'checkbox') && (tElement[0].tagName !== 'MD-CHECKBOX') && (!tAttrs.btnCheckbox)) {
        throw 'checklist-model should be applied to `input[type="checkbox"]` or `md-checkbox`.';
      }

      if (!tAttrs.checklistValue && !tAttrs.value) {
        throw 'You should provide `value` or `checklist-value`.';
      }

      // by default ngModel is 'checked', so we set it if not specified
      if (!tAttrs.ngModel) {
        // local scope var storing individual checkbox model
        tAttrs.$set("ngModel", "checked");
      }

      return postLinkFn;
    }
  };
}]);

// we depend on ngMaterial - let's hook up now
var flowApp = angular.module('FlowApp', ['ngMaterial','ngMessages','ngRoute','mdPickers','checklist-model']);

// setup our routes
flowApp.config(function($routeProvider, $locationProvider, $anchorScrollProvider, $mdThemingProvider) {

    $routeProvider
        // route for the home page
        .when('/flow', {
            templateUrl : '../flow/public/templates.views.home.html',
            controller  : 'HomeCtrl',
            controllerAs : 'homeController'
        })

        // route for the editor page
        .when('/flow/editor/:flowId/:userId/:leadId/:listId', {
            templateUrl : '../flow/public/templates.views.editor.html',
            controller  : 'FlowCtrl',
            controllerAs : 'flowController'
        })

        // route for the rendered page
        .when('/flow/view/:flowId/:userId/:leadId/:listId', {
            templateUrl : '../flow/public/templates.views.render.html',
            controller  : 'FlowCtrl',
            controllerAs : 'flowController'
        })

        .otherwise({redirectTo: '/flow'});

    $locationProvider.html5Mode(true);
});

// base url for our data service calls
flowApp.factory('baseUrlService', function($location){
    var factory = {};
    factory.base = function(){
        console.log($location.host());
        const protocol = $location.protocol();
        const host = $location.host();
        return `${protocol}://${host}/api/v1/flows`
    };
    return factory;
});

function httpInterceptor() {
    return {
        request: function(config) {
            return config;
        },

        requestError: function(config) {
            return config;
        },

        response: function(res) {
            if (res.statusText === "OK" && res.data && res.data.data) {
                res.data = res.data.data
                if (res.config.url && res.config.url.endsWith('/flows/user-id')) {
                    res.data = res.data.user_id
                }
            }

            return res;
        },

        responseError: function(res) {
            return res;
        }
    }
}

flowApp.factory('httpInterceptor', httpInterceptor)
.config(function($httpProvider) {
    $httpProvider.defaults.withCredentials = true;
    $httpProvider.interceptors.push('httpInterceptor');
})

// handles our communication with the back end
flowApp.service('dataService', function($http, baseUrlService){

    this.getCurrentUserId = function (){
        return $http({
            url: baseUrlService.base() + "/user-id",
            method:"GET"
        });
    };

    this.getFlowPages = function (flow_id, user_id){
        return $http({
            url: baseUrlService.base() + `/pages`,
            method:"GET",
            params:{ flowId: flow_id, userId: user_id }
        });
    };

    this.addFlowPage = function(flow_id, page_name, page_description){
        return $http({
            url: baseUrlService.base() + "/page/create",
            method:"POST",
            data:{flowId: flow_id, pageName:page_name, pageDescription:page_description}
        });
    };

    this.editFlowPage = function(page_id, page_name, page_description, disposition, page_bg_color, default_disposition_sdr, randomize_pages_off){
        return $http({
            url: baseUrlService.base() + "/page/edit",
            method:"POST",
            data:{pageId:page_id, pageName:page_name, pageDescription:page_description, defaultDisposition:disposition, bgColor: page_bg_color, defaultDispositionSDR: default_disposition_sdr, randomizePagesOff:randomize_pages_off}
        });
    };

    this.deleteFlowPage = function(page_id){
        return $http({
            url: baseUrlService.base() + `/page/delete/${page_id}`,
            method:"POST",
            data:{pageId:page_id}
        });
    };

    this.getFlows = function(){
        return $http({
            url: baseUrlService.base() + "/list",
            method:"GET"
        });
    };

    this.addFlow = function(flow_name, flow_description){
        return $http({
            url: baseUrlService.base() + "/create",
            method:"POST",
            data:{flowName:flow_name, flowDescription:flow_description}
        });
    };

    this.editFlow = function(flow_id, flow_name, flow_description){
        return $http({
            url: baseUrlService.base() + "/edit",
            method:"POST",
            data:{flowId:flow_id, flowName:flow_name, flowDescription:flow_description}
        });
    };

    this.copyFlow = function(flow_id, flow_name, flow_description){
        return $http({
            url: baseUrlService.base() + "/copy",
            method:"POST",
            data:{flowId:flow_id, flowName:flow_name, flowDescription:flow_description}
        });
    };

    this.deleteFlow = function(flow_id){
        return $http({
            url: baseUrlService.base() + `/delete/${flow_id}`,
            method:"POST",
            data:{flowId:flow_id}
        });
    };

    this.getFlowFields = function (flow_id){
        return $http({
            url: baseUrlService.base() + `/fields`,
            method:"GET",
            params:{ flowId: flow_id }
        });
    };

    this.deleteFlowField = function(field_id){
        return $http({
            url: baseUrlService.base() + `/field/delete`,
            method:"POST",
            data:{fieldId:field_id}
        });
    };

    this.saveFlowField = function(field){
        return $http({
            url: baseUrlService.base() + "/field/create",
            method:"POST",
            data:{
                field_id: field.field_id,
                flow_id:field.flow_id,
                page:field.page,
                field_label: field.field_label,
                field_name: field.field_name,
                field_description: field.field_description,
                field_rank:field.field_rank,
                field_help:field.field_help,
                field_type: field.field_type,
                field_options: field.field_options,
                field_size:field.field_size,
                field_max:field.field_max,
                field_default:field.field_default,
                field_required:field.field_required,
                name_position:field.name_position,
                multi_position:field.multi_position,
                field_order:field.field_order,
                goto_page:field.goto_page,
                goto_field:field.goto_field,
                field_hidden:field.field_hidden,
                field_validations: field.field_validations,
                field_min:field.field_min,
                field_pattern:field.field_pattern
            }
        });
    };

    this.getEmailTemplates = function (){
        return $http({
            url: baseUrlService.base() + "/email-templates",
            method:"GET"
        });
    };

    this.getACDQueues = function (user_id){
        return $http({
            url: baseUrlService.base() + "/acd-queues",
            method:"GET",
            params:{ userId: user_id }
        });
    };

    this.getDispositions = function (user_id, list_id, queue_id){
        return $http({
            url: baseUrlService.base() + "/dispositions",
            method:"GET",
            params:{ userId: user_id, listId: list_id, queueId: queue_id }
        });
    };

    this.performAction = function(action, value, user_id, scope, fields, lead_id, page_id, goToPause){
        var leadData = {};
        if (!lead_id) lead_id = '';
        if (!page_id) page_id = '';

        if (scope && fields) {
            // populate all standard fields
            leadData["user"] = scope["user"];
            leadData["full_name"] = scope["full_name"];
            leadData["phone_number"] = scope["phone_number"];
            leadData["gmt_offset_now"] = scope["gmt_offset_now"];
            leadData["alt_phone"] = scope["alt_phone"];
            leadData["email"] = scope["email"];
            leadData["title"] = scope["title"];
            leadData["first_name"] = scope["first_name"];
            leadData["middle_initial"] = scope["middle_initial"];
            leadData["last_name"] = scope["last_name"];
            leadData["address1"] = scope["address1"];
            leadData["address2"] = scope["address2"];
            leadData["address3"] = scope["address3"];
            leadData["city"] = scope["city"];
            leadData["state"] = scope["state"];
            leadData["postal_code"] = scope["postal_code"];
            leadData["date_of_birth"] = scope["date_of_birth"];
            leadData["gender"] = scope["gender"];
            leadData["security_phrase"] = scope["security_phrase"];
            leadData["source_id"] = scope["source_id"];
            leadData["vendor_lead_code"] = scope["vendor_lead_code"];
            leadData["comments"] = scope["comments"];
            leadData["owner"] = scope["owner"];
            leadData["rank"] = scope["rank"];
            leadData["lead_id"] = scope["lead_id"];
            leadData["list_id"] = scope["list_id"];
            leadData["user_id"] = scope["user_id"];

            // populate custom flow fields
            angular.forEach(fields, function(field, idx){
                if (field.field_type == "TEXTFIELD" ||
                    field.field_type == "TEXTAREA" ||
                    field.field_type == "DROPDOWN" ||
                    field.field_type == "MULTISELECTION" ||
                    field.field_type == "RADIOBUTTON" ||
                    field.field_type == "CHECKBOX" ||
                    field.field_type == "DATEPICKER" ||
                    field.field_type == "TIMEPICKER"){

                    if (Array.isArray(scope[field.field_label])){
                        if (scope[field.field_label].length > 0)
                            leadData[field.field_label] = scope[field.field_label].join();
                        else
                            leadData[field.field_label] = '';
                    } else {
                        leadData[field.field_label] = scope[field.field_label];
                    }
               }
            });

            // combine into single jSON string and send off!
            var jsonData = JSON.stringify(leadData);

            return $http({
                url: baseUrlService.base() + "/perform-action",
                method:"POST",
                data:{userId: user_id, action:action, value: value,leadData:jsonData,leadId:lead_id,pageId:page_id,goToPause:goToPause}
            });
        } else {

            return $http({
                url: baseUrlService.base() + "/perform-action",
                method:"POST",
                data:{userId: user_id, action:action, value: value,leadData:'',leadId:lead_id,pageId:page_id,goToPause:goToPause}
            });
        }
    };

    this.getLead = function (lead_id, list_id, user_id, flow_id, is_preview){
        return $http({
            url: baseUrlService.base() + "/lead",
            method:"GET",
            params:{ leadId: lead_id, listId: list_id, userId: user_id, flowId: flow_id, isPreview: is_preview }
        });
    };

    this.getHouseholdingRecords = function (lead_id, list_id, lookup_field_name, lookup_field_value, user_id, lookup_scope){
        return $http({
            url: baseUrlService.base() + "/householding-records",
            method:"GET",
            params:{ leadId: lead_id, listId: list_id, lookupFieldName: lookup_field_name, lookupFieldValue: lookup_field_value, lookupScope: lookup_scope, userId: user_id }
        });
    };

    this.dispoHouseholdingRecord = function (householdingLeadId, flow_lead_id, dispo, user_id, dispo_type, lookup_field_name, lookup_field_value, lookup_scope){
        return $http({
            url: baseUrlService.base() + "/dispo-householding-record",
            method:"POST",
            params:{ leadId: householdingLeadId, flowLeadId: flow_lead_id, status: dispo, userId: user_id, dispoType: dispo_type, lookupFieldName: lookup_field_name, lookupFieldValue: lookup_field_value, lookupScope: lookup_scope}
        });
    };

    this.checkUserStatus = function (user_id, uniqueid){
        return $http({
            url: baseUrlService.base() + "/check-user-status",
            method:"GET",
            params:{ userId: user_id, uniqueId: uniqueid }
        });
    };

    this.saveLead = function(scope, fields){
        var leadData = {};

        // populate all standard fields
        leadData["user"] = scope["user"];
        leadData["full_name"] = scope["full_name"];
        leadData["phone_number"] = scope["phone_number"];
        leadData["alt_phone"] = scope["alt_phone"];
        leadData["email"] = scope["email"];
        leadData["title"] = scope["title"];
        leadData["first_name"] = scope["first_name"];
        leadData["middle_initial"] = scope["middle_initial"];
        leadData["last_name"] = scope["last_name"];
        leadData["address1"] = scope["address1"];
        leadData["address2"] = scope["address2"];
        leadData["address3"] = scope["address3"];
        leadData["city"] = scope["city"];
        leadData["state"] = scope["state"];
        leadData["postal_code"] = scope["postal_code"];
        leadData["date_of_birth"] = scope["date_of_birth"];
        leadData["gender"] = scope["gender"];
        leadData["security_phrase"] = scope["security_phrase"];
        leadData["source_id"] = scope["source_id"];
        leadData["vendor_lead_code"] = scope["vendor_lead_code"];
        leadData["comments"] = scope["comments"];
        leadData["owner"] = scope["owner"];
        leadData["rank"] = scope["rank"];
        leadData["lead_id"] = scope["lead_id"];
        leadData["list_id"] = scope["list_id"];
        leadData["user_id"] = scope["user_id"];

        // populate custom flow fields
        angular.forEach(fields, function(field, idx){
            if (field.field_type == "TEXTFIELD" ||
                field.field_type == "TEXTAREA" ||
                field.field_type == "DROPDOWN" ||
                field.field_type == "MULTISELECTION" ||
                field.field_type == "RADIOBUTTON" ||
                field.field_type == "CHECKBOX" ||
                field.field_type == "DATEPICKER" ||
                field.field_type == "TIMEPICKER"){

                if (Array.isArray(scope[field.field_label])){
                    if (scope[field.field_label].length > 0)
                        leadData[field.field_label] = scope[field.field_label].join();
                    else
                        leadData[field.field_label] = '';
                } else {
                    leadData[field.field_label] = scope[field.field_label];
                }
           }
        });

        // combine into single jSON string and send off!
        var jsonData = JSON.stringify(leadData);

        return $http({
            url: baseUrlService.base() + "/savelead",
            method:"POST",
            data:{leadData:jsonData}
        });
    };
});

// other controllers needed for our independent views to function
flowApp.controller('HomeCtrl', function($scope, $mdDialog, $location, dataService, pagerService) {

    var homeController = this;

    homeController.flows = [];

    homeController.isLoading = false;

    homeController.flowsCurrentPage = [];
    homeController.flowsItemsPerPage = 25;

    homeController.flowPager = {};
    homeController.flowSetCurrentPage = function(pg){
        if (pg < 1 || pg > homeController.flowPager.totalPages) {
            return;
        }

        // get pager object from service
        homeController.flowPager = pagerService.GetPager(homeController.flows.length, pg, homeController.flowsItemsPerPage);

        // get current page of items
        homeController.flowsCurrentPage = homeController.flows.slice(homeController.flowPager.startIndex, homeController.flowPager.endIndex + 1);

        console.log('finished fetching flows...');
    }

    homeController.findFlowById = function (id){
        var flow = null;

        angular.forEach(homeController.flows, function(f, idx){
            if (f.flow_id == id){
                flow = f;
            }
        });

        return flow;
    }

    homeController.addFlow = function (){
        $mdDialog.show({
          controller: function DialogController($scope, $mdDialog) {
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
            $scope.continue = function(flow_name, flow_description) {

                homeController.isLoading = true;

                // send script flow to data service
                dataService.addFlow(flow_name, flow_description)
                    .then(function(response){

                    var flow_id = response.data;

                    homeController.isLoading = false;

                    // automatically go to editor
                    if (flow_id > 0){
                        homeController.editFlowDesign(flow_id);
                    } else {
                        homeController.refreshFlows();
                    }

                }, function (error){
                    homeController.isLoading = false;
                    console.log(error);
                });

                $mdDialog.hide();
            };
          },
          templateUrl: '../flow/public/templates.views.flow.edit.html',
          parent: angular.element(document.body),
          clickOutsideToClose:true
        })
        .then(function(field) {

        }, function() {
            // user cancelled operation
        });
    };

    homeController.editFlowDesign = function (flow_id){
        dataService.getCurrentUserId()
            .then(function(response){
            var userId = response.data;
            var leadId = 0; // for the designer, always zero
            var listId = 0; // for the designer, always zero

            $location.path('/flow/editor/' + flow_id + '/' + userId + '/' + leadId + '/' + listId);

        }, function (error){
            homeController.isLoading = false;
            console.log(error);
        });
    };

    homeController.editFlow = function (flow_id){
        $mdDialog.show({
          controller: function DialogController($scope, $mdDialog, locals) {
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
            $scope.continue = function(flow_name, flow_description) {

                homeController.isLoading = true;

                // send script flow to data service
                dataService.editFlow(flow_id, flow_name, flow_description)
                    .then(function(response){

                    homeController.isLoading = false;

                    homeController.refreshFlows();

                }, function (error){
                    homeController.isLoading = false;
                    console.log(error);
                });

                $mdDialog.hide();
            };

            // tell dialog who we're working with
            var flow = homeController.findFlowById(locals.flow_id);
            $scope.flow_id = flow.flow_id;
            $scope.flow_name = flow.flow_name;
            $scope.flow_description = flow.flow_description;
          },
          locals:{
                flow_id: flow_id
          },
          templateUrl: '../flow/public/templates.views.flow.edit.html',
          parent: angular.element(document.body),
          clickOutsideToClose:true,
          windowClass: 'flowEditDialog'
        })
        .then(function(field) {

        }, function() {
            // user cancelled operation
        });
    };

    homeController.copyFlow = function (flow_id){
        $mdDialog.show({
          controller: function DialogController($scope, $mdDialog, locals) {
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
            $scope.continue = function(flow_name, flow_description) {

                homeController.isLoading = true;

                // send script flow to data service
                dataService.copyFlow(flow_id, flow_name, flow_description)
                    .then(function(response){

                    homeController.isLoading = false;

                    homeController.refreshFlows();

                }, function (error){
                    homeController.isLoading = false;
                    console.log(error);
                });

                $mdDialog.hide();
            };

            // tell dialog who we're working with
            var flow = homeController.findFlowById(locals.flow_id);
            $scope.flow_name = flow.flow_name + ' Copy';
            $scope.flow_description = flow.flow_description;
          },
          locals:{
                flow_id: flow_id
          },
          templateUrl: '../flow/public/templates.views.flow.edit.html',
          parent: angular.element(document.body),
          clickOutsideToClose:true
        })
        .then(function(field) {

        }, function() {
            // user cancelled operation
        });
    };

    homeController.deleteFlow = function (flow_id){
        $mdDialog.show({

          controller: function DialogController($scope, $mdDialog) {
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
            $scope.continue = function() {
                homeController.isLoading = true;

                 // send script flow to data service
                dataService.deleteFlow(flow_id)
                    .then(function(response){

                    homeController.isLoading = false;

                    homeController.refreshFlows();

                }, function (error){
                    homeController.isLoading = false;
                    console.log(error);
                });

                $mdDialog.hide();
            };
          },
          templateUrl: '../flow/public/templates.views.delete.dialog.html',
          parent: angular.element(document.body),
          clickOutsideToClose:true
        })
        .then(function(field) {

        }, function() {
            // user cancelled operation
        });
    };

    homeController.refreshFlows = function(){
        // retrieve our list of flows
        homeController.isLoading = true;

        dataService.getFlows().then(function(response){
            homeController.isLoading = false;

            homeController.flows = response.data;

            homeController.flowSetCurrentPage(1);

        }, function (error){
            homeController.isLoading = false;
            console.log(error);
        });
    };

    homeController.refreshFlows();
});

// define draggable element for script controls in left bar
flowApp.directive('draggable', function() {
    return {
        restrict:'A',
        link: function(scope, element, attrs) {
            element = jQuery(element);

            // save unique control id for use later
            element.data('controlId', attrs.draggable);

            element.addClass('draggableControl');
            element.draggable({
                containment:'#fullContainer',
                stack: '.draggableControl',
                cursor: 'move',
                revert:true,
                helper: function(){
                    // drag a clone of element instead
                    return $(this).clone().css({'width':$(this).css('width')});}
              });
        }
    };
});

// define our droppable zones for controls
flowApp.directive('droppable', function($compile) {

    return {
        restrict: 'A',
        link: function(scope, element, attrs){
            element = jQuery(element);
            element.addClass('dropZone');
            element.css({'min-height':'200px'});
            element.droppable({
                accept: '.draggableControl',
                hoverClass: 'hovered',
                drop: function(event, ui){
                    scope.flowController.handleDrop(event,ui,this);
                }
            });
        }
    }
});

// we need to make sure we're done loading before running some procedures
flowApp.directive('angularLoaded', function($compile) {
    return {
        restrict:'A',
        link: function(scope, element, attrs) {
            var currentDropZoneId = attrs.angularLoaded;
            var flowController = scope.$parent.$parent.flowController;
            var currentDropZone = flowController.findDropZoneByIdAllPages(currentDropZoneId);

            // if we don't have a field, we're probably just creating a new
            // droppable zone, so no need to try loading the control-preview
            // as the user hasn't added a new control to this yet
            if (!currentDropZone.field || !currentDropZone.field.field_id){
                return;
            }

            var field = currentDropZone.field;

            var controlPreview = '<control-preview field="zone.field" type="'+field.field_type+'"></control-preview>';
            var compiledOutput = $compile(controlPreview)(scope);
            element.append(compiledOutput);
            jQuery(element).droppable('disable');
            jQuery(element).css({'opacity':'1.0'}); // otherwise will show children as light opaque also
            jQuery(element).removeClass('ui-droppable');
        }
    };
});

// control common configuration element
flowApp.directive('controlSharedConfig', function($compile) {
    return {
        restrict:'E',
        scope: {
            control:'=',
            field:'='
        },
        templateUrl: '../flow/public/templates.control.settings.html',
        link: function(scope, element, attrs) {
            if (!scope.flowController){
                scope.flowController = scope.$parent.flowController;
            }
        }
    };
});

// control custom configuration element
flowApp.directive('controlConfig', function($compile) {
    return {
        restrict:'E',
        scope: {
            control:'=',
            field:'='
        },
        template: '<ng-include src="getTemplateUrl()"/>',
        controller: function($scope) {
            // load control config based on control type
            $scope.getTemplateUrl = function() {
                var controlType = '';

                if ($scope.$parent.control){
                    var controlType = $scope.$parent.control.type;

                    if (controlType){
                        controlType = controlType.toLowerCase();
                    }
                } else if ($scope.$parent.locals) {
                    controlType = $scope.$parent.field.field_type.toLowerCase();

                    if (!$scope.flowController){
                        $scope.flowController = $scope.$parent.locals.flowController;
                    }
                }

                if (controlType.length > 0){
                    var templateUrl = '../flow/public/templates.control.config.'+controlType+'.html';
                    return templateUrl;
                } else {
                    return '';
                }
            }
        }
    };
});

// control custom preview element
flowApp.directive('controlPreview', function($compile) {
    return {
        restrict:'E',
        scope: {
            control:'=',
            field:'='
        },
        template: '<ng-include src="getTemplateUrl()"/>',
        controller: function($scope) {
            // load control config based on control type
            $scope.getTemplateUrl = function() {
                var controlType = '';

                if ($scope.field){
                    controlType = $scope.field.field_type.toLowerCase();
                }
                else if ($scope.$parent.zone && $scope.$parent.zone.field){
                    controlType = $scope.$parent.zone.field.field_type.toLowerCase();
                }
                else if ($scope.$parent.field){
                    $scope.field = $scope.$parent.field;
                    controlType = $scope.$parent.field.field_type.toLowerCase();
                }
                else if ($scope.$parent.flowController && $scope.$parent.flowController.lastEditedField){
                    $scope.field = $scope.$parent.flowController.lastEditedField;

                    controlType = $scope.field.field_type.toLowerCase();
                }

                if (controlType.length > 0){
                    var templateUrl = '../flow/public/templates.control.preview.'+controlType+'.html';
                    return templateUrl;
                } else {
                    return '';
                }
            }
        }
    };
});

// let's make editing text fun!
flowApp.directive('richEditor', function () {
    return {
        require: '?ngModel',
        link: function (scope, elm, attr, ngModel) {

            var ck = CKEDITOR.replace( elm[0],{
                  uiColor: '#CCEAEE',
                  toolbar :
                  [
                    { name: 'clipboard', items: [ 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ] },
                    { name: 'editing', items: [ 'Find', 'Replace', '-', 'SelectAll', '-' ] },
                    '/',
                    { name: 'basicstyles', items: [ 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat' ] },
                    { name: 'paragraph', items: [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', '-', 'BidiLtr', 'BidiRtl', 'Language' ] },
                    { name: 'links', items: [ 'Link', 'Unlink', 'Anchor' ] },
                    { name: 'insert', items: [ 'Image', 'Flash', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak', 'Iframe' ] },
                    '/',
                    { name: 'styles', items: [ 'fields', 'standardFields', 'Styles', 'Format', 'Font', 'FontSize','Source' ] },
                    { name: 'colors', items: [ 'TextColor', 'BGColor' ] },
                    { name: 'tools', items: [ 'Maximize', 'ShowBlocks' ] },
                  ],
                  extraPlugins: 'fields,standardFields',
               }
            );

            if (!ngModel) return;

            ck.on('instanceReady', function () {
                ck.setData(ngModel.$viewValue);
            });

            function updateModel() {
                scope.$apply(function () {
                    ngModel.$setViewValue(ck.getData());
                });
            }

            ck.on('change', updateModel);
            ck.on('key', updateModel);
            ck.on('dataReady', updateModel);

            // save to editor so we can access objects later if needed
            ck.flowController = scope.$parent.flowController;

            ngModel.$render = function (value) {
                ck.setData(ngModel.$viewValue);

                if (CKEDITOR.plugins.registered){
                    var registeredPlugins = CKEDITOR.plugins.registered;
                    if (registeredPlugins.fields)
                        registeredPlugins.fields = null;
                    if (registeredPlugins.standardFields)
                        registeredPlugins.standardFields = null;
                }

                CKEDITOR.plugins.add('fields',
                {
                    requires : ['richcombo'], //, 'styles' ],
                    init : function( editor )
                    {
                        var config = editor.config,
                        lang = editor.lang.format;

                        editor.ui.addRichCombo( 'fields',
                        {
                            label : "Fields",
                            title :"Fields",
                            voiceLabel : "Fields",
                            className : 'cke_format',
                            multiSelect : false,

                            panel :
                            {
                               css : [ config.contentsCss, CKEDITOR.getUrl( editor.skinPath + 'editor.css' ) ],
                               voiceLabel : lang.panelVoiceLabel
                            },

                            init : function()
                            {
                               this.startGroup( "Fields" );

                               // prepopulate fields dropdown in designer but make sure
                               // we're only showing fields that we want
                               for (var field in editor.flowController.fields){
                                    var fieldRef = editor.flowController.fields[field];

                                    switch(fieldRef.field_type.toLowerCase()){
                                        case 'textfield':
                                        case 'radiobutton':
                                        case 'dropdown':
                                        case 'multiselection':
                                            this.add('['+fieldRef.field_label+']', fieldRef.field_label, fieldRef.field_label);
                                            break;
                                    }
                               }
                            },

                            onClick : function( value )
                            {
                               editor.focus();
                               editor.fire( 'saveSnapshot' );
                               editor.insertHtml(value);
                               editor.fire( 'saveSnapshot' );
                            }
                        });
                    }
                });

                CKEDITOR.plugins.add('standardFields',
                {
                    requires : ['richcombo'], //, 'styles' ],
                    init : function( editor )
                    {
                        var config = editor.config,
                        lang = editor.lang.format;

                        editor.ui.addRichCombo( 'standardFields',
                        {
                            label : "Standard",
                            title :"Standard",
                            voiceLabel : "Standard",
                            className : 'cke_format',
                            multiSelect : false,

                            panel :
                            {
                               css : [ config.contentsCss, CKEDITOR.getUrl( editor.skinPath + 'editor.css' ) ],
                               voiceLabel : lang.panelVoiceLabel
                            },

                            init : function()
                            {
                               this.startGroup( "Standard Fields" );

                               // prepopulate standard system fields in dropdown
                               this.add('[user]', 'Agent ID', 'Agent ID');
                               this.add('[full_name]', 'Agent Name', 'Agent Name');
                               this.add('[phone_number]', 'Phone Number', 'Phone Number');
                               this.add('[alt_phone]', 'Atl Phone', 'Alt Phone');
                               this.add('[email]', 'Email', 'Email');
                               this.add('[title]', 'Title', 'Title');
                               this.add('[first_name]', 'First Name', 'First Name');
                               this.add('[last_name]', 'Last Name', 'Last Name');
                               this.add('[address1]', 'Address 1', 'Address 1');
                               this.add('[address2]', 'Address 2', 'Address 2');
                               this.add('[address3]', 'Address 3', 'Address 3');
                               this.add('[city]', 'City', 'City');
                               this.add('[state]', 'State', 'State');
                               this.add('[postal_code]', 'Zip', 'Zip');
                               this.add('[date_of_birth]', 'DOB', 'DOB');
                               this.add('[gender]', 'Gender', 'DOB');
                               this.add('[source_id]', 'Lead Source', 'Lead Source');
                               this.add('[vendor_lead_code]', 'Lead Vendor', 'Lead Vendor');
                               this.add('[comments]', 'Comments', 'Comments');
                               this.add('[owner]', 'Owner', 'Owner');
                               this.add('[rank]', 'Rank', 'Rank');
                            },

                            onClick : function( value )
                            {
                               editor.focus();
                               editor.fire( 'saveSnapshot' );
                               editor.insertHtml(value);
                               editor.fire( 'saveSnapshot' );
                            }
                        });
                    }
                });
            };
        }
    };
});

flowApp.directive('ngEnter', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if(event.which === 13) {
                scope.$apply(function (){
                    scope.$eval(attrs.ngEnter);
                });

                event.preventDefault();
            }
        });
    };
});

flowApp.directive('selectOnClick', ['$window', function ($window) {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            element.on('click', function () {
                if (!$window.getSelection().toString()) {
                    // Required for mobile Safari
                    this.setSelectionRange(0, this.value.length)
                }
            });
        }
    };
}]);

flowApp.directive('labelname', function($q, $timeout) {
    return {
        require: 'ngModel',
        link: function(scope, elm, attrs, ctrl) {
            ctrl.$asyncValidators.labelname = function(modelValue, viewValue) {

                if (ctrl.$isEmpty(modelValue)) {
                    // consider empty model valid
                    return $q.when();
                }

                var def = $q.defer();

                var isNotANumber = isNaN(modelValue.charAt(0));

                // uncomment to force unique labelnames across the board
                if (isNotANumber && scope.$parent.flowController.checkFieldLabelExists(modelValue, scope.field) == false) {
                //if (isNotANumber) {
                    // label is available
                    def.resolve();
                } else {
                    def.reject();
                }
                return def.promise;
            };
        }
    };
});

flowApp.filter("sanitize", ['$sce', function($sce) {
    return function(htmlCode){
        if (htmlCode && htmlCode.length > 1)
            return $sce.trustAsHtml(htmlCode);
        else
            return '';
    }
}]);

flowApp.filter('trustUrl', ['$sce', function ($sce) {
    return function(url) {
        if (url && url.length > 1)
            return $sce.trustAsResourceUrl(url);
        else
            return '';
    };
}]);

// core controller where most of the magic happens
flowApp.controller('FlowCtrl', function ($scope, $log, $mdDialog, $mdMedia,
    $compile, $mdpDatePicker, $mdpTimePicker, $sce, $routeParams, $location,
    $anchorScroll, $timeout, dataService, pagerService) {

    var flowController = this;

    flowController.flowId = $routeParams.flowId;
    flowController.userId = $routeParams.userId;
    flowController.leadId = $routeParams.leadId;
    flowController.listId = $routeParams.listId;
    flowController.onCall = false;

    // default selected tab
    flowController.selectedIndex = 0;

    // for filtering page fields section on left
    flowController.showAllPageFields = false;

    // provides our 'accordion' functionality for controls and fields
    flowController.toggleScriptElements = function(elements, senderId){
        angular.forEach(elements, function(element, idx){
            element.visible = !element.visible;

            if (element.visible){
                $('#'+senderId).html('<i class="material-icons">expand_more</i>');
            } else {
                $('#'+senderId).html('<i class="material-icons">expand_less</i>');
            }
        });
    };

    // get source as a trusted Url for our iframes
    flowController.getIFrameSrc = function(source){
        return $sce.trustAsResourceUrl(source);
    };

    // setup our date / time pickers default
    flowController.currentDate = new Date();

    this.showDatePicker = function(ev) {
        $mdpDatePicker(flowController.currentDate, {
        targetEvent: ev
      }).then(function(selectedDate) {
        flowController.currentDate = selectedDate;
      });;
    };

    this.filterDate = function(date) {
      return moment(date).date() % 2 == 0;
    };

    this.showTimePicker = function(ev) {
        $mdpTimePicker(flowController.currentTime, {
        targetEvent: ev
      }).then(function(selectedDate) {
        flowController.currentTime = selectedDate;
      });
    };

    // are we in preview mode? if so setup UI accordingly
    flowController.inPreview = false;
    flowController.previewButtonText = 'Preview';
    flowController.togglePreview = function(){
        flowController.inPreview = !flowController.inPreview;

        var sideBar = $('md-sidenav');

        if (flowController.inPreview){
            flowController.renderFlow(true);
            flowController.previewButtonText = 'Close';
            $('#flowFieldsPreview').show();
            $('md-sidenav').hide();
            //$('#flowToolbar').show();
            $('#newPageNameContainer').hide();
            $('#newPageDescContainer').hide();
            $('#newScriptPageButton').hide();
            $('#editScriptPageButton').hide();
            $('#designerExitButton').hide();
            $('#tabsContainer').hide();
            $('#previewButton').css({'width':'10.5%'});
            $('#previewButton').css({'margin':'auto'});
            $('#designerButtons').css({'width':'99%'});
            $('#designerButtons').css({'text-align':'center'});
            $('#designerButtons').css({'margin-top':'5px'});
        } else {
            flowController.previewButtonText = 'Preview';
            $('#flowFieldsPreview').hide();
            $('md-sidenav').show();
            //$('#flowToolbar').hide();
            $('#newPageNameContainer').show();
            $('#newPageDescContainer').show();
            $('#newScriptPageButton').show();
            $('#editScriptPageButton').show();
            $('#designerExitButton').show();
            $('#tabsContainer').show();
            $('#previewButton').css({'width':'auto'});
            $('#previewButton').css({'margin':'6px 8px'});
            $('#designerButtons').css({'width':'45%'});
            $('#designerButtons').css({'text-align':'right'});
            $('#designerButtons').css({'margin-top':'0px'});

            // make sure we're on the same tab we left off in
            // (needed to make sure Page Fields lists shows correct items
            if (flowController.selectedIndex > -1)
                selected = scriptPages[flowController.selectedIndex];
        }
    };

    flowController.exitDesigner = function(){
        $location.path('/');
    };

    // validations we support on fields
    flowController.fieldValidations = [
        {text:'Required Field', value:'Required'},
        {text:'Minimum Length', value:'MinLength'},
        {text:'Maximum Length', value:'MaxLength'},
        {text:'Regular Expression', value:'RegEx'},
        {text:'Email Address', value:'Email'},
        {text:'Website URL', value:'URL'},
        {text:'Option Limit', value:'OptionLimit'},
    ];

    // for adding new script pages
    flowController.newPageName = '';
    flowController.newPageDescription = '';

    // setup our control config dialog and its options
    flowController.customFullscreen = $mdMedia('xs') || $mdMedia('sm');
    flowController.showControlConfig = function(ev, fieldInternalId) {
        var useFullScreen = ($mdMedia('sm') || $mdMedia('xs'))  && flowController.customFullscreen;

        $mdDialog.show({
          controller: function DialogController($scope, $mdDialog, locals) {
                $scope.hide = function() {
                    $mdDialog.hide();
                };
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.saveSettings = function() {
                    $mdDialog.hide();

                    // let's work on a copy of this field since we need to
                    // remap how it's sent to the dataService
                    var editedField = {};
                    angular.copy($scope.field, editedField);

                    switch (editedField.field_type.toLowerCase()){
                        case 'action':
                            if (editedField.field_options=='WEBSERVICE'){
                                editedField.field_default = editedField.web_service_url + "~"
                                    + editedField.web_service_params + "~"
                                    + editedField.web_service_method + "~"
                                    + editedField.web_service_var_result;
                            } else if (editedField.field_options=='HOUSEHOLD'){
                                editedField.field_default = editedField.field_default + "~"
                                    + editedField.household_scope + "~"
                                    + editedField.household_itemsperpage + "~"
                                    + editedField.household_dispo;
                            } else if (editedField.field_options=='XFERCALL'){
                                editedField.field_default = editedField.xfer_default_type + "~"
                                    + editedField.xfer_default_number + "~"
                                    + editedField.xfer_send_dtmf + "~"
                                    + editedField.xfer_default_queue;
                            } else if (editedField.field_options=='SENDEMAIL'){
                                editedField.field_default = editedField.email_template_id + "~"
                                    + editedField.email_appt_date_field + "~"
                                    + editedField.email_appt_time_field + "~"
                                    + editedField.email_reply_to_field;
                            }
                            break;
                        case 'calculation':

                            editedField.field_options = '';
                            angular.forEach($scope.field.calculations, function(calculation, idx){
                                if (calculation.field_label && calculation.field_label.length > 0){

                                    editedField.field_options +=
                                        calculation.field_label + '|'
                                        + calculation.operator + '|'
                                        + calculation.value + '\n';
                                }
                            });

                            break;
                        case 'condition':

                            editedField.field_options = '';
                            angular.forEach($scope.field.conditions, function(condition, idx){
                                if (condition.field_label && condition.field_label.length > 0){

                                    if (condition.goto_page == "_blank_") condition.goto_page='';
                                    if (condition.goto_field == "_blank_") condition.goto_field='';

                                    editedField.field_options +=
                                        condition.field_label + '|'
                                        + condition.operator + '|'
                                        + condition.value + '|'
                                        + condition.goto_page + '|'
                                        + condition.goto_field + '|'
                                        + condition.scrollto_field + '|'
                                        + condition.make_field_required + '|'
                                        + condition.goto_field_else + '|' +
                                        + condition.check_page_load_only + '\n';
                                }
                            });

                            break;
                        case 'checkbox':
                        case 'dropdown':
                        case 'multiselection':
                        case 'radiobutton':
                            editedField.field_options = '';
                            editedField.field_options_freeform = '';
                            /*
                            angular.forEach($scope.field.field_options, function(option, idx){
                                if (option.text && option.text.length > 0){
                                    editedField.field_options += option.value + '~' + option.text + '\n';
                                    editedField.field_options_freeform += option.value + ',' + option.text + '\n';
                                }
                            });*/
                            if ($scope.field.field_options_freeform && $scope.field.field_options_freeform.length > 1){
                                var field_opts = $scope.field.field_options_freeform.split('\n');
                                angular.forEach(field_opts, function(option, idx){
                                    var optArr = option.split('|');
                                    if (optArr[1] && optArr[1].length > 0){
                                        editedField.field_options += optArr[0] + '~' + optArr[1] + '\n';
                                        editedField.field_options_freeform += optArr[0] + '|' + optArr[1] + '\n';
                                    }
                                });

                            }

                            break;
                    }

                    if (editedField.field_hidden===true){
                        editedField.field_hidden='Y';

                        // since this is a hidden field, ignore field order
                        //editedField.field_order = '0';
                        //$scope.field.field_order = '0';
                    } else {
                        editedField.field_hidden='N';
                    }

                    if (editedField.multi_position===true){
                        editedField.multi_position='RANDOMIZE';
                    } else {
                        editedField.multi_position='VERTICAL';
                    }

                    if (editedField.field_validations && editedField.field_validations.length > 0){
                        var validations = '';
                        angular.forEach(editedField.field_validations, function (validation, idx){
                            validations += validation + ',';
                        });
                        validations = validations.replace(/,\s*$/, "");
                        editedField.field_validations = validations;
                    } else {
                        editedField.field_validations = '';
                    }

                    if (editedField.field_validations.indexOf('Required') > -1){
                        editedField.field_required = 'Y';
                        $scope.field.field_required = 'Y';
                    } else {
                        editedField.field_required = 'N';
                        $scope.field.field_required = 'N';
                    }

                    // send field settins to our data service!
                    flowController.isLoading = true;

                    // let's do a little housecleaning first
                    if (!editedField.field_min) editedField.field_min = 0;
                    if (!editedField.field_max) editedField.field_max = 0;
                    if (!editedField.field_size) editedField.field_size = 0;
                    if (!editedField.field_width) editedField.field_width = 0;
                    if (!editedField.field_order) editedField.field_order = 0;

                    editedField.field_rank = editedField.field_order;
                    $scope.field.field_rank = editedField.field_rank;

                    editedField.field_label = editedField.field_label.trim();
                    $scope.field.field_label = editedField.field_label;

                    dataService.saveFlowField(editedField)
                        .then(function(response){

                        var result = response.data;

                        if (result.field_id){
                            $scope.field.field_id = result.field_id;
                        }

                        flowController.isLoading = false;

                        flowController.refreshFlowPages();

                    }, function (error){
                        flowController.isLoading = false;
                        console.log(error);
                    });
                };

                $scope.delete = function() {
                    $mdDialog.hide();

                    flowController.isLoading = true;

                    dataService.deleteFlowField($scope.field.field_id)
                        .then(function(response){

                        // find local copy of field and delete it
                        var fieldToDelete = flowController.findFieldById($scope.field.field_id);
                        if (fieldToDelete){
                            var index = flowController.fields.indexOf(fieldToDelete);
                            flowController.fields.splice(index, 1);
                        }

                        flowController.isLoading = false;

                        flowController.refreshFlowPages();

                    }, function (error){
                        flowController.isLoading = false;
                        console.log(error);
                    });
                };

                $scope.locals = locals;

                // tell dialog who we're working with
                $scope.field = locals.flowController.findFieldByInternalId(locals.fieldInternalId);

                if ($scope.field.field_type.toLowerCase() == 'condition' && !$scope.field.conditions){
                    $scope.field.conditions = [{
                        field_label:'',
                        operator:'',
                        value:'',
                        goto_page:'',
                        goto_field:'',
                        goto_field_else:'',
                        scrollto_field:'',
                        make_field_required:'',
                        goto_page_name:'',
                        goto_field_name:'',
                        goto_field_else_name:'',
                        check_page_load_only:''
                    }];
                }
                $scope.flowController = locals.flowController;
          },
          templateUrl: '../flow/public/templates.control.settings.dialog.html',
          parent: angular.element(document.body),
          targetEvent: ev,
          clickOutsideToClose:false,
          fullscreen: useFullScreen,
          locals:{
                fieldInternalId: fieldInternalId,
                flowController: flowController
            }
        })
        .then(function(field) {

        }, function() {
            // user cancelled operation
        });

        $scope.$watch(function() {
            return $mdMedia('xs') || $mdMedia('sm');
        }, function(wantsFullScreen) {
            flowController.customFullscreen = (wantsFullScreen === true);
        });
    };

    // generates random internal IDs for our dropZones and dynamic fields
    flowController.randomID = function (fieldType){
        return fieldType.concat(Date.now()) + Math.floor((Math.random() * 10000) + 1);
    };

    flowController.fields = [];

    // keep track of these so when we change scope data we can quickly refresh
    flowController.scriptFieldsWithVariables = [];

    flowController.allConditions = [];
    flowController.allCheckboxes = [];
    flowController.allCalculations = [];

    flowController.hideOnRepeatFields = [];
    flowController.showOnRepeatFields = [];
    flowController.hideOnRepeatFieldsAffected = [];

    var scriptPages = [],
    selected = null, // which page are we on?
    previous = null; // which page did we just leave?

    flowController.editPageInfo = function(){
        var page_id = selected.page_id;

        $mdDialog.show({
          controller: function DialogController($scope, $mdDialog, locals) {
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
            $scope.continue = function(page_name, page_description, default_disposition, page_bg_color, default_disposition_sdr, randomize_pages_off) {

                flowController.isLoading = true;

                // send script flow to data service
                dataService.editFlowPage(page_id, page_name, page_description, default_disposition, page_bg_color, default_disposition_sdr, randomize_pages_off)
                    .then(function(response){

                    // update local obj reference
                    var page = flowController.findPageById(locals.page_id);
                    page.page_name = page_name;
                    page.page_description = page_description;
                    page.page_bg_color = page_bg_color;
                    page.default_disposition = default_disposition;
                    page.default_disposition_sdr = default_disposition_sdr;
                    page.randomize_pages_off = randomize_pages_off;

                    flowController.isLoading = false;

                }, function (error){
                    flowController.isLoading = false;
                    console.log(error);
                });

                $mdDialog.hide();
            };

            // tell dialog who we're working with
            var page = flowController.findPageById(locals.page_id);
            $scope.page_id = page.page_id;
            $scope.page_name = page.page_name;
            $scope.page_description = page.page_description;
            $scope.page_bg_color = page.page_bg_color;
            $scope.default_disposition = page.default_disposition;
            $scope.default_disposition_sdr = page.default_disposition_sdr;
            $scope.randomize_pages_off = page.randomize_pages_off=="True" ? true : false;
          },
          locals:{
                page_id: page_id
          },
          templateUrl: '../flow/public/templates.views.flowpage.edit.html',
          parent: angular.element(document.body),
          clickOutsideToClose:true
        })
        .then(function(page) {

        }, function() {
            // user cancelled operation
        });
    }

    // function to get any existing pages and build UI
    flowController.refreshFlowPages = function () {
        flowController.isLoading = true;

        dataService.getFlowPages(flowController.flowId, flowController.userId)
            .then(function(response){

            var pagesData = response.data;

            if (pagesData.length > 0){

                // loop through all our fields, associating them with thier page accordingly
                dataService.getFlowFields($routeParams.flowId).then(function(fieldResponse){
                    var fieldData = fieldResponse.data;

                    angular.forEach(pagesData, function(page, ix){
                        page.pageZones = [];

                        // do we have fields for this page?
                        angular.forEach(fieldData, function(field, fix){
                            if (field.page == page.page_id){

                                // get info from our source control, setup internal fields accordingly
                                var control = flowController.findControlByType(field.field_type);
                                field.internal_id=flowController.randomID('field');
                                field.imageUrl=control.imageUrl;
                                field.visible=true;
                                field.showNavigationOpts=control.showNavigationOpts;
                                field.showValidationOpts=control.showValidationOpts;
                                field.controlRef=control;

                                if (field.field_hidden=='Y'){
                                    field.field_hidden=true;
                                } else {
                                    field.field_hidden=false;
                                }

                                if (field.multi_position=='RANDOMIZE'){
                                    field.multi_position=true;
                                } else {
                                    field.multi_position=false;
                                }

                                if (field.field_validations && field.field_validations.length > 0){
                                    field.field_validations = field.field_validations.split(',');
                                }

                                switch (field.field_type.toLowerCase()){
                                    case 'action':
                                        if (field.field_options=='WEBSERVICE'){
                                            var ws_opts = field.field_default.split('~');

                                            field.web_service_url = ws_opts[0];
                                            field.web_service_params = ws_opts[1];
                                            field.web_service_method = ws_opts[2];
                                            field.web_service_var_result = ws_opts[3];
                                        } else if (field.field_options=='HOUSEHOLD') {
                                            var hh_opts = field.field_default.split('~');

                                            field.field_default = hh_opts[0];
                                            field.household_scope = hh_opts[1];
                                            field.household_itemsperpage = hh_opts[2];
                                            field.household_dispo = hh_opts[3];
                                        } else if (field.field_options=='XFERCALL') {
                                            var xfer_opts = field.field_default.split('~');

                                            field.xfer_default_type = xfer_opts[0];
                                            field.xfer_default_number = xfer_opts[1];
                                            field.xfer_send_dtmf = xfer_opts[2];
                                            field.xfer_default_queue = xfer_opts[3];
                                        } else  if (field.field_options=='SENDEMAIL'){
                                            var email_opts = field.field_default.split('~');

                                            field.email_template_id = email_opts[0];
                                            field.email_appt_date_field = email_opts[1];
                                            field.email_appt_time_field = email_opts[2];
                                            field.email_reply_to_field = email_opts[3];
                                        }

                                        break;
                                    case 'calculation':
                                        if (field.field_options) {
                                            var calculations = field.field_options.split('\n');
                                            field.calculations = [];

                                            angular.forEach(calculations, function(calculation, idx){
                                                var opts = calculation.split('|');
                                                if (opts[0] && opts[0].length > 0){
                                                    field.calculations.push({
                                                        field_label:opts[0],
                                                        operator:opts[1],
                                                        value:opts[2]
                                                    });
                                                }
                                            });
                                        }
                                        break;
                                    case 'condition':
                                        if (field.field_options){
                                            var conditions = field.field_options.split('\n');
                                            field.conditions = [];

                                            angular.forEach(conditions, function(condition, idx){
                                                var opts = condition.split('|');
                                                if (opts[0] && opts[0].length > 0){

                                                    // get friend page name
                                                    var goToPageName = opts[3];
                                                    if (opts[3] && opts[3].length > 0 && opts[3] != "_blank_"){
                                                        var goToPage = flowController.findPageById(opts[3]);
                                                        if (goToPage){
                                                            goToPageName = goToPage.page_name;
                                                        }
                                                    }

                                                    // get friendly field name
                                                    var goToFieldName = opts[4];
                                                    if (opts[4] && opts[4].length > 0 && opts[4] != "_blank_"){
                                                        var goToField = flowController.findFieldById(opts[4]);
                                                        if (goToField){
                                                            goToFieldName = goToField.field_name;
                                                        }
                                                    }

                                                    // get friendly field name
                                                    var goToFieldElseName = opts[7];
                                                    if (opts[7] && opts[7].length > 0 && opts[7] != "_blank_"){
                                                        var goToFieldElse = flowController.findFieldById(opts[7]);
                                                        if (goToFieldElse){
                                                            goToFieldElseName = goToFieldElse.field_name;
                                                        }
                                                    }

                                                    if (opts[5]=="True" || opts[5]=="true" || opts[5] == true){
                                                        opts[5] = true;
                                                    } else {
                                                        opts[5] = false;
                                                    }

                                                    if (opts[8]=="True" || opts[8]=="true" || opts[8] == true){
                                                        opts[8] = true;
                                                    } else {
                                                        opts[8] = false;
                                                    }

                                                    field.conditions.push({
                                                        field_label:opts[0],
                                                        operator:opts[1],
                                                        value:opts[2],
                                                        goto_page:opts[3],
                                                        goto_field:opts[4],
                                                        scrollto_field:opts[5],
                                                        make_field_required:opts[6],
                                                        goto_field_else:opts[7],
                                                        goto_page_name:goToPageName,
                                                        goto_field_name:goToFieldName,
                                                        goto_field_else_name:goToFieldElseName,
                                                        check_page_load_only:opts[8]
                                                    });
                                                }
                                            });
                                        }

                                        break;
                                    case 'checkbox':
                                    case 'dropdown':
                                    case 'multiselection':
                                    case 'radiobutton':
                                        if (field.field_options){
                                            var kvp = field.field_options.split('\n');
                                            field.field_options = [];
                                            field.field_options_freeform = '';

                                            angular.forEach(kvp, function(optionValues, idx){
                                                var opts = optionValues.split('~');
                                                if (opts.length > 0){

                                                    // make sure we don't add duplicate values
                                                    var searchResults = $.grep(field.field_options, function(e){ return e.value === opts[0]; });
                                                    if (searchResults.length==0 && opts[1] && opts[1].length > 0){
                                                        field.field_options.push({text:opts[1],value:opts[0]});
                                                        field.field_options_freeform += opts[0] + '|' + opts[1] + '\n';
                                                    }
                                                }
                                            });

                                            if (field.multi_position==true){
                                                flowController.shuffleFieldOptions(field.field_options);
                                            }
                                        }
                                        break;
                                    case 'iframe':
                                        field.new_window = field.field_options;
                                        break;
                                }

                                // if hidden, do not add dropzone
                                // user will be able to edit using the left side bar
                                //if (!field.field_hidden){
                                    page.pageZones.push({
                                        id:flowController.randomID('dropZone'),
                                        field: field,
                                        page:page
                                    });
                                //}

                                // always remove field to avoid conflicts
                                var existingField = flowController.findFieldById(field.field_id);
                                if (existingField){
                                    var fieldIndex = flowController.fields.indexOf(existingField);
                                    field.internal_id = existingField.internal_id;
                                    flowController.fields[fieldIndex] = field;;
                                } else {
                                    flowController.fields.push(field);
                                }
                            }
                        });

                        // always remove page if already exists so we can have latest config
                        var existingPage = flowController.findPageById(page.page_id);
                        if (existingPage){
                            var pageIndex = scriptPages.indexOf(existingPage);
                            scriptPages[pageIndex].pageZones = page.pageZones;
                        } else {
                            scriptPages.push(page);
                        }

                        if (page.pageZones.length == 0){
                            page.pageZones = [{
                                id:flowController.randomID('dropZone'),
                                field: {}
                            }];
                        }
                    });

                    flowController.initScriptPages();

                    flowController.isLoading = false;
                });

            } else {
                // add default welcome page
                flowController.newPageName = 'Welcome Page';
                flowController.newPageDescription = 'This is your first Flow Page.';
                flowController.addScriptPage();
            }

        }, function (error){
            flowController.isLoading = false;
            console.log(error);
        });
    };

    // find out who we are if we don't already know and load script pages
    if (flowController.userId > 0){
        flowController.refreshFlowPages();
    } else {
        flowController.isLoading = true;

        dataService.getCurrentUserId()
            .then(function(response){

            flowController.userId = response.data;

            flowController.refreshFlowPages();

        }, function (error){
            flowController.isLoading = false;
            console.log(error);
        });
    }

    // expose access to our pages ../publicly and listen for page tab changes
    flowController.initScriptPages = function(){
        flowController.scriptPages = scriptPages;

        // build dynamic dropZones before and after us to allow users to build
        angular.forEach(scriptPages, function(currentPage, idx){

            // work with a copy of our zones
            var tempPageZones = [];
            angular.copy(currentPage.pageZones, tempPageZones);

            angular.forEach(tempPageZones, function(zone, idx){

                // if we're already a droppable zone, no need to add pre/post drop zones
                if (zone.field && zone.field.field_id >= 0)
                {
                    var currentDropZoneIdx = flowController.findDropZoneIdxMyPage(currentPage,zone.id);

                    var hasPreviousDropZone = false;
                    var previousDropZone = currentPage.pageZones[currentDropZoneIdx-1];
                    if (previousDropZone){
                       hasPreviousDropZone = previousDropZone.field && !previousDropZone.field.field_id;
                    }

                    var hasNextDropZone = false;
                    var nextDropZone = currentPage.pageZones[currentDropZoneIdx+1];
                    if (nextDropZone){
                       hasNextDropZone = nextDropZone.field && !nextDropZone.field.field_id;
                    } else {
                        hasNextDropZone = !zone.field || !zone.field.field_id;
                    }

                    // create draggable blocks before and after us if none exists
                    if (!hasPreviousDropZone){
                        currentDropZoneIdx = flowController.findDropZoneIdxMyPage(currentPage,zone.id);
                        currentPage.pageZones.splice(currentDropZoneIdx, 0, {
                                id:flowController.randomID('dropZone'),
                                field:{
                                    field_rank:0,
                                    field_order:0
                                }
                            });
                    }

                    if (!hasNextDropZone){
                        currentDropZoneIdx = flowController.findDropZoneIdxMyPage(currentPage,zone.id);
                        currentPage.pageZones.splice(currentDropZoneIdx + 1, 0, {
                                id:flowController.randomID('dropZone'),
                                field:{
                                    field_rank:0,
                                    field_order:0
                                }
                            });
                    }
                }
            });

            if (currentPage.pageZones.length == 0){
                currentPage.pageZones = [{
                    id:flowController.randomID('dropZone'),
                    field: {}
                }];
            }
        });

        $scope.$watch('flowController.selectedIndex', function(current, old){
            previous = selected;
            selected = scriptPages[current];
        });
    };

    // pages contains zones, which contains one field
    flowController.addScriptPage = function () {

        // do not add with same name
        if (flowController.findPageByName(flowController.newPageName))
            return;

        flowController.isLoading = true;

        dataService.addFlowPage(flowController.flowId, flowController.newPageName, flowController.newPageDescription)
            .then(function(response){

            var page = response.data;

            if (page.page_id > 0) {
                // need empty drop zone so user can add fields
                page.pageZones = [{
                    id:flowController.randomID('dropZone'),
                    field: {}
                }];
                scriptPages.push(page);

                flowController.selectedIndex = scriptPages.indexOf(page);

                if (!selected){
                    flowController.initScriptPages();
                }

                flowController.refreshFlowPages();
            }

            flowController.isLoading = false;

            flowController.newPageDescription = '';
            flowController.newPageName = '';

        }, function (error){
            flowController.isLoading = false;
            console.log(error);
        });
    };

    flowController.removeScriptPage = function (ev, scriptPage) {
        // Appending dialog to document.body to cover sidenav in docs app

        $mdDialog.show({

          controller: function DialogController($scope, $mdDialog) {
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
            $scope.continue = function() {
                var index = scriptPages.indexOf(scriptPage);
                scriptPages.splice(index, 1);

                flowController.isLoading = true;

                // send script flow to data service
                dataService.deleteFlowPage(scriptPage.page_id)
                    .then(function(response){

                    flowController.isLoading = false;

                }, function (error){
                    flowController.isLoading = false;
                    console.log(error);
                });

                $mdDialog.hide();
            };
          },
          templateUrl: '../flow/public/templates.views.delete.dialog.html',
          parent: angular.element(document.body),
          targetEvent: ev,
          clickOutsideToClose:true
        })
        .then(function(field) {

        }, function() {
            // user cancelled operation
        });
    };

    flowController.getScriptVerbiagePreview = function(verbiage){
        var returnStr = $sce.trustAsHtml(verbiage);
        return returnStr;
    };

    flowController.lastEditedField = null;

    flowController.controls = [
        {
            id:10000,
            name: 'Action',
            description: "Performs a specific action, such as dispositioning or creating a new lead.",
            type: 'Action',
            imageUrl: "/flow/images/ctl_action.png",
            visible: true,
            showNavigationOpts: true,
            showValidationOpts: false
        },
        {
            id:10001,
            name: 'Check Box',
            description: "Checkboxes are used to provide users with a list of one or more options to check.",
            type: 'Checkbox',
            imageUrl: "/flow/images/ctl_checkbox.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: true
        },
        {
            id:10002,
            name: 'Comments Box',
            description: "Comments boxes are large text fields commonly used to enter a lot of text.",
            type: 'Textarea',
            imageUrl: "/flow/images/ctl_textarea.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: true
        },
        {
            id:11000,
            name: 'Condition',
            description: "Conditional controls allow you to define logic for navigation.",
            type: 'Condition',
            imageUrl: "/flow/images/ctl_conditional.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: false
        },
        {
            id:12000,
            name: 'Date Picker',
            description: "Date pickers allow users to select a date from a predefined list of dates.",
            type: 'Datepicker',
            imageUrl: "/flow/images/ctl_date.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: true
        },
        {
            id:13000,
            name: 'Dropdown List',
            description: "Dropdown lists are used to provide users with a list of possible options to choose from.",
            type: 'Dropdown',
            imageUrl: "/flow/images/ctl_dropdown.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: true
        },
        {
            id:14000,
            name: 'Empty Space',
            description: "Empty spaces are great for adding separation between other fields and controls.",
            type: 'Space',
            imageUrl: "/flow/images/ctl_space.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: false
        },
        {
            id:15000,
            name: 'Expression',
            description: "Conditional buttons allow you to display output based on evaluating expressions.",
            type: 'Calculation',
            imageUrl: "/flow/images/ctl_calculation.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: false
        },
        {
            id:16000,
            name: 'iFrame',
            description: "iFrames are used to load external web pages within your script pages.",
            type: 'iFrame',
            imageUrl: "/flow/images/ctl_frame.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: false
        },
        {
            id:17000,
            name: 'Image',
            description: "Images allow you to add photos such as logos to your script pages.",
            type: 'Image',
            imageUrl: "/flow/images/ctl_image.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: false
        },
        {
            id:18000,
            name: 'Multi Selection',
            description: "Multi-selection dropdown lists are used to provide users with a list of one or more selections to choose from.",
            type: 'Multiselection',
            imageUrl: "/flow/images/ctl_multiselect.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: true
        },
        {
            id:19000,
            name: 'Navigation Button',
            description: "Navigation buttons allow you to navigate to specific script pages when clicked by a user.",
            type: 'Navigation',
            imageUrl: "/flow/images/ctl_navigation.png",
            visible: true,
            showNavigationOpts: true,
            showValidationOpts: false
        },
        {
            id:20000,
            name: 'Radio Button',
            description: "Radio buttons are used to provide users with a list of options where only one can be selected.",
            type: 'Radiobutton',
            imageUrl: "/flow/images/ctl_radiobutton.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: true
        },
        {
            id:21000,
            name: 'Script Verbiage',
            description: "Script verbiage are general read-only text commonly used to guide users during interactions.",
            type: 'Script',
            imageUrl: "/flow/images/ctl_scripttext.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: false
        },
        {
            id:22000,
            name: 'Text Field',
            description: "Text fields are simple text boxes used to capture a relatively short amount of text, such as name, address, etc.",
            type: 'Textfield',
            imageUrl: "/flow/images/ctl_textbox.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: true
        },
        {
            id:23000,
            name: 'Time Picker',
            description: "Time pickers allow users to select a time from a predefined list of dates.",
            type: 'Timepicker',
            imageUrl: "/flow/images/ctl_date.png",
            visible: true,
            showNavigationOpts: false,
            showValidationOpts: true
        }
    ];

    flowController.handleDrop = function(event,ui,dropZone) {
        // if we don't have an event and ui obj, user dbl-clicked existing drop zone for editing
        // so we don't need to do anything except for show the config editor for the DZ

        if (!ui && !event){
            var currentField = dropZone.field;
        }
        else {

            // dynamically add new droppable zones as user is interacting with us
            var currentDropZoneIdx = 0;
            var currentDropZoneId = jQuery(dropZone).attr('id');
            var currentDropZone = flowController.findDropZoneById(currentDropZoneId);

            var previousDropZone = jQuery(dropZone).prev('.dropZone');
            var nextDropZone = jQuery(dropZone).next('.dropZone');

            // create draggable blocks before and after us if none exists
            if (!previousDropZone.attr('id')){
                currentDropZoneIdx = flowController.findDropZoneIdx(currentDropZoneId);
                selected.pageZones.splice(currentDropZoneIdx, 0, {
                        id:flowController.randomID('dropZone'),
                        field:{
                            field_rank:0,
                            field_order:0
                        }
                    });
            }

            if (!nextDropZone.attr('id')){
                currentDropZoneIdx = flowController.findDropZoneIdx(currentDropZoneId);

                selected.pageZones.splice(currentDropZoneIdx + 1, 0, {
                        id:flowController.randomID('dropZone'),
                        field:{
                            field_rank:0,
                            field_order:0
                        }
                    });
            }

            // if prev/next has dropZone with a control, add droppable separator
            if (previousDropZone.attr('id')) {
                // do we have a control already? if so, need to give user a new droppable slot
                var zoneDraggableControl = previousDropZone.find('control-preview');

                if (zoneDraggableControl){
                    currentDropZoneIdx = flowController.findDropZoneIdx(currentDropZoneId);
                    selected.pageZones.splice(currentDropZoneIdx, 0, {
                            id:flowController.randomID('dropZone'),
                            field:{
                                field_rank:0,
                                field_order:0
                            }
                        });
                }
            }

            if (nextDropZone.attr('id')){
                // do we have a control already? if so, need to give user a new droppable slot
                var zoneDraggableControl = nextDropZone.find('control-preview');

                if (zoneDraggableControl){
                    currentDropZoneIdx = flowController.findDropZoneIdx(currentDropZoneId);
                    selected.pageZones.splice(currentDropZoneIdx+1, 0, {
                            id:flowController.randomID('dropZone'),
                            field:{
                                field_rank:0,
                                field_order:0
                            }
                        });
                }
            }

            var dragged = ui.draggable.clone();
            var control = flowController.findControlById(dragged.data('controlId'));

            // we need to determine our field order based on where we were dropped
            var fieldRank = 1;
            var previousZoneId = previousDropZone.attr('id');

            if (previousZoneId){
                var prevZoneObj = flowController.findDropZoneById(previousZoneId);
                if (prevZoneObj.field && prevZoneObj.field.field_rank >= 0){
                    fieldRank = prevZoneObj.field.field_rank + 1;
                }
            }

            var currentField = {};

            if (!control){ // we're dropping an existing field
                var fieldId = dragged.attr('fieldId');

                // let's duplicate this
                var existingField = flowController.findFieldById(fieldId);
                angular.copy(existingField, currentField);

                // generate a unique field_label for this
                var fieldLabel = '';
                var field_label_counter = 0;
                var field_label_exists = false;
                var maxLoopCounter = 15;

                // wrap in exception to allow us to break out of angular loop
                var BreakException = {};

                do {
                    fieldLabel = existingField.field_type.toLowerCase().concat(field_label_counter);

                    field_label_exists = false;

                    angular.forEach(flowController.fields, function(fld, idx){
                        if (fld.field_label == fieldLabel){
                            field_label_exists = true;
                        }
                    });

                    field_label_counter++;
                }
                while (field_label_exists && field_label_counter < maxLoopCounter);

                control = currentField.controlRef;

                currentField.field_id = 0;
                currentField.field_label = fieldLabel;
                currentField.field_rank = fieldRank;
                currentField.field_order = fieldRank;
                currentField.page = selected.page_id;

                currentField.internal_id = flowController.randomID('field');
                currentField.imageUrl = control.imageUrl;
                currentField.visible = true;
                currentField.showNavigationOpts = control.showNavigationOpts;
                currentField.showValidationOpts = control.showValidationOpts;
                currentField.new_window = '';
                currentField.calc_field1 = '';
                currentField.calc_operator = '';
                currentField.calc_field2 = '';
            } else {
                //for 'textfield','radiobutton','multiselection','checkbox','dropdown','textarea','datepicker','timepicker'
                //this is used to store whether to copy this field's data on a Repeat w/ New Contact action
                var goToFieldDefaultSetting = '';

                if (control.type=='Textfield'||control.type=='Radiobutton'
                    ||control.type=='Multiselection'||control.type=='Checkbox'
                    ||control.type=='Dropdown'||control.type=='Textarea'
                    ||control.type=='Datepicker'||control.type=='Timepicker'){
                    goToFieldDefaultSetting=true;
                }

                // add new field to list, associating with this control/dropzone
                currentField = {
                    field_id: 0,
                    flow_id:flowController.flowId,
                    page:selected.page_id,
                    field_label: control.type.concat(currentDropZoneIdx),
                    field_name: control.type.concat(currentDropZoneIdx),
                    field_description: '',
                    field_rank:fieldRank,
                    // field_help stores unique checkbox settings for the following field types:
                    // field.field_type =='textfield' || field.field_type  =='radiobutton' ||
                    // field.field_type == 'multiselection' || field.field_type =='checkbox' ||
                    // field.field_type =='dropdown' || field.field_type =='textarea' ||
                    // field.field_type =='datepicker' || field.field_type =='timepicker' ||
                    // field.field_type =='script' || field.field_type =='script'
                    field_help:'',
                    field_type: control.type,

                    //
                    // field_options contents vary based on control type:
                    //
                    // calculation: field_label|operator|field_label (operator can be [+,-,*,/])
                    // checkbox/dropdown/multiselection/radiobutton: list of key~value separated by newline (\n)
                    // condition: field_label|condition|field_label|page_id|field_id (operator can be [Equals,NotEquals,Contains,NotContains])
                    //      condition's else statement stores page_id|field_id in field_default
                    // iframe: open_in_new_window_flag
                    //      iframes also uses field_size for iframe's width and field_max for height
                    // image:
                    //      images also uses field_size for image's width and field_max for height
                    // script: script text
                    // space:
                    //      spaces have no options but uses field_size for height

                    field_options: control.type=='Textarea' ? 10 : [],

                    // stores columns for text areas and width for iframes
                    field_size:control.type=='iFrame'? 800 : control.type=='Textarea' ? 100 : control.type=='Space' ? 30 : 200,

                    // stores height for iframes; option limits for md-option controls
                    field_max:control.type=='iFrame'? 600 : control.type=='Multiselection'? 3 : 200,

                    field_default:'',
                    field_required:'N',
                    name_position:'LEFT',
                    multi_position:'VERTICAL',
                    field_order:fieldRank,
                    goto_page:0,

                    //*****************************
                    // new part of data model
                    //field_hidden:control.type=='Condition' || control.type=='Calculation'? true : false,
                    field_hidden: false,

                    //one or more of ["Required","MinLength","MaxLength","RegEx","Email","URL","OptionLimit"]
                    field_validations: [],

                    //opposite of field_max
                    field_min:'',

                    // stores regEx (for navs/actions, stores do not chk condition flag)
                    field_pattern:'',

                    goto_field:goToFieldDefaultSetting,
                    //*****************************

                    // internal id and the others below is not part of the
                    // core model and used only for view
                    internal_id:flowController.randomID('field'),
                    imageUrl: control.imageUrl,
                    visible: true,
                    showNavigationOpts: control.showNavigationOpts,
                    showValidationOpts: control.showValidationOpts,
                    new_window:'', // internal helper for iframe config
                    calc_field1:'',
                    calc_operator:'',
                    calc_field2:'',
                    controlRef: control,
                    field_options_freeform: ''
                };
            }

            flowController.fields.push(currentField);
            currentDropZone.field = currentField;
            flowController.lastEditedField = currentField;

            // add control preview to our dropzone
            var controlPreview = '<control-preview field="zone.field" type="'+control.type+'">'+currentField.internal_id+'</control-preview>';
            var scope = angular.element(dropZone).scope();
            var compiledOutput = $compile(controlPreview)(scope);

            jQuery(dropZone).append(compiledOutput);

            ui.draggable.draggable('option', 'revert', false);
            jQuery(dropZone).droppable('disable');
            jQuery(dropZone).css({'opacity':'1.0'}); // otherwise will show children as light opaque also
            jQuery(dropZone).removeClass('droppable');
        }

        if (currentField.field_type.toLowerCase() == 'condition' && !currentField.conditions){
            currentField.conditions = [{
                    field_label:'',
                    operator:'',
                    value:'',
                    goto_page:'',
                    goto_field:'',
                    goto_field_else:'',
                    scrollto_field:'',
                    make_field_required:'',
                    goto_page_name:'',
                    goto_field_name:'',
                    goto_field_else_name:'',
                    check_page_load_only:''
            }];
        } else if (currentField.field_type.toLowerCase() == 'calculation' && !currentField.calculations){
            currentField.calculations = [{
                    field_label:'',
                    operator:'',
                    value:''
            }];
        }

        var currentFieldTypeLCase = currentField.field_type.toLowerCase();
        if (currentFieldTypeLCase == 'iframe'){
            if (currentField.field_options=="True" || currentField.field_options==true){
                currentField.field_options = true;
            } else {
                currentField.field_options = false;
            }
        } else if (currentFieldTypeLCase == 'navigation'||currentFieldTypeLCase == 'action'){
            if (currentField.field_pattern && (currentField.field_pattern=="True" || currentField.field_pattern==true)){
                currentField.field_pattern = true;
            } else {
                currentField.field_pattern = false;
            }

            if (currentFieldTypeLCase == 'navigation'){
	            if (currentField.field_options && (currentField.field_options=="True" || currentField.field_options==true)){
	                currentField.field_options = true;
	            } else {
	                currentField.field_options = false;
	            }
	        }
        } else if (currentFieldTypeLCase=='textfield'||currentFieldTypeLCase=='radiobutton'
            ||currentFieldTypeLCase=='multiselection'||currentFieldTypeLCase=='checkbox'
            ||currentFieldTypeLCase=='dropdown'||currentFieldTypeLCase=='textarea'
            ||currentFieldTypeLCase=='datepicker'||currentFieldTypeLCase=='timepicker'){

            if (currentField.goto_field && (currentField.goto_field=="True" || currentField.goto_field==true)){
                currentField.goto_field = true;
            } else {
                currentField.goto_field = false;
            }

            if (currentFieldTypeLCase=='textfield'){
                if (currentField.field_options && (currentField.field_options=="True" || currentField.field_options==true))
                    currentField.field_options = true;
                else
                    currentField.field_options = false;
            }
        }

        flowController.lastEditedField = currentField;
        flowController.showControlConfig(null,currentField.internal_id);
    };

    flowController.fieldHasOptions = function(field_label){
        if (field_label != ''){
            var field = flowController.findFieldByLabel(field_label);
            return (field && field.field_type != "CALCULATION" && field.field_options && field.field_options.length > 0 && field.field_options != "False" && field.field_options != "True");
        }

        return false;
    };

    flowController.getFieldOptions = function(field_label){
        var field = flowController.findFieldByLabel(field_label);
        if (field && field.field_type != "CALCULATION" && field.field_options && field.field_options.length > 0 && field.field_options != "False" && field.field_options != "True")
            return field.field_options;
        else
            return [];
    };

    flowController.addCondition = function(field){
        field.conditions.push({
            field_label:'',
            operator:'',
            value:'',
            goto_page:'',
            goto_field:'',
            goto_field_else:'',
            scrollto_field:'',
            make_field_required:'',
            goto_page_name:'',
            goto_field_name:'',
            goto_field_else_name:'',
            check_page_load_only:''
        });
    }

    flowController.deleteCondition = function(field,condition){
        var index = field.conditions.indexOf(condition);
        field.conditions.splice(index, 1);
    };

    flowController.addCalculation = function(field){
        field.calculations.push({
            field_label:'',
            operator:'',
            value:''
        });
    };

    flowController.deleteCalculation = function(field,calculation){
        var index = field.calculations.indexOf(calculation);
        field.calculations.splice(index, 1);
    };

    flowController.findDropZoneIdx = function (dropZoneId){
        var BreakException = {};
        var currentDzIdx = 0;

        try{
        angular.forEach(selected.pageZones, function(zone, idx){
            if (zone.id == dropZoneId){
                currentDzIdx = idx;
                throw BreakException;
            }
        });
        } catch(e){

        }

        return currentDzIdx;
    };

    flowController.findDropZoneById = function (dropZoneId){
        var BreakException = {};
        var currentDz = null;

        try{
        angular.forEach(selected.pageZones, function(zone, idx){
            if (zone.id == dropZoneId){
                currentDz = zone;
                throw BreakException;
            }
        });
        } catch(e){

        }

        return currentDz;
    };

    flowController.findDropZoneByIdAllPages = function (dropZoneId){
        var BreakException = {};
        var currentDz = null;

        try{
        angular.forEach(scriptPages, function(pages, idx){
            angular.forEach(pages.pageZones, function(zone, idx){
                if (zone.id == dropZoneId){
                    currentDz = zone;
                    throw BreakException;
                }
            });
        });
        } catch(e){

        }

        return currentDz;
    };

    flowController.findDropZoneIdxMyPage = function (pages, dropZoneId){
        var BreakException = {};
        var currentDzIdx = 0;

        try{
        angular.forEach(pages.pageZones, function(zone, idx){
            if (zone.id == dropZoneId){
                currentDzIdx = idx;
                throw BreakException;
            }
        });
        } catch(e){

        }

        return currentDzIdx;
    };

    flowController.findControlById = function (controlId){
        var BreakException = {};
        var control = null;

        try{
        angular.forEach(flowController.controls, function(ctl, idx){
            if (ctl.id == controlId){
                control = ctl;
                throw BreakException;
            }
        });
        } catch(e){

        }

        return control;
    };

    flowController.findControlByType = function (type){
        var BreakException = {};
        var control = null;

        try{
        angular.forEach(flowController.controls, function(ctl, idx){
            if (ctl.type.toLowerCase() == type.toLowerCase()){
                control = ctl;
                throw BreakException;
            }
        });
        } catch(e){

        }

        return control;
    };

    flowController.findPageById = function (page_id){
        var BreakException = {};
        var page = null;

        try{
        angular.forEach(flowController.scriptPages, function(pg, idx){
            if (pg.page_id == page_id){
                page = pg;
                throw BreakException;
            }
        });
        } catch(e){

        }

        return page;
    };

    flowController.findPageIndexByPageId = function (page_id){
        var BreakException = {};
        var index = -1;

        try{
        angular.forEach(flowController.scriptPages, function(pg, idx){
            if (pg.page_id == page_id){
                index = idx;
                throw BreakException;
            }
        });
        } catch(e){

        }

        return index;
    };

    flowController.findPageByName = function (page_name){
        var BreakException = {};
        var page = null;

        try{
        angular.forEach(flowController.scriptPages, function(pg, idx){
            if (pg.page_name == page_name){
                page = pg;
                throw BreakException;
            }
        });
        } catch(e){

        }

        return page;
    };

    flowController.shuffleFieldOptions = function(optionsArray){
        if (optionsArray && optionsArray.length > 0){
            var currentIndex = optionsArray.length, temporaryValue, randomIndex;

            // While there remain elements to shuffle...
            while (0 !== currentIndex) {
                // Pick a remaining element...
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex -= 1;

                // And swap it with the current element.
                temporaryValue = optionsArray[currentIndex];
                optionsArray[currentIndex] = optionsArray[randomIndex];
                optionsArray[randomIndex] = temporaryValue;
            }
        }

        return optionsArray;
    };

    flowController.findFieldById = function (fieldId){
        var BreakException = {};
        var field = null;

        try{
        angular.forEach(flowController.fields, function(fld, idx){
            if (fld.field_id == fieldId){
                field = fld;
                throw BreakException;
            }
        });
        } catch(e){

        }

        return field;
    };

    flowController.checkFieldLabelExists = function (fieldLabel, myField){
        var BreakException = {};
        var field = null;

        // only prevent script fields from being added with the same name
        if (myField.field_type.toLowerCase() == 'script'){
            try{
            angular.forEach(flowController.fields, function(fld, idx){
                if (fld.field_label == fieldLabel && myField.field_id != fld.field_id){
                    field = fld;
                    throw BreakException;
                }
            });
            } catch(e){

            }
        }

        return field != null;
    };

    flowController.findFieldByLabel = function (fieldLabel){
        var BreakException = {};
        var field = null;

        try{
        angular.forEach(flowController.fields, function(fld, idx){
            if (fld.field_label == fieldLabel){
                field = fld;
                throw BreakException;
            }
        });
        } catch(e){

        }

        return field;
    };

    flowController.findFieldByLabelAndPage = function (fieldLabel, fieldPage){
        var BreakException = {};
        var field = null;

        try{
        angular.forEach(flowController.fields, function(fld, idx){
            if (fld.field_label == fieldLabel && fld.page == fieldPage){
                field = fld;
                throw BreakException;
            }
        });
        } catch(e){

        }

        return field;
    };

    flowController.findFieldByInternalId = function (internalId){
        var BreakException = {};
        var field = null;

        try{
        angular.forEach(flowController.fields, function(fld, idx){
            if (fld.internal_id == internalId){
                field = fld;
                throw BreakException;
            }
        });
        } catch(e){

        }

        return field;
    };

    flowController.filterPageFields = function (field){

        if (selected) {
            return (field.page == selected.page_id || flowController.showAllPageFields);
        }

        return false;
    };

    flowController.updateFreeformFieldOptions = function (field) {

        field.field_options_freeform = '';

        for(var i = 0; i < field.field_options.length; i++) {
            var obj = field.field_options[i];

            field.field_options_freeform += obj.value + '|' + obj.text + '\n';
        }
    };

    flowController.addFieldOption = function (internalId, fieldText, fieldValue){
        var field = flowController.findFieldByInternalId(internalId);

        if (field.field_options==null)
            field.field_options = [];

        var result = $.grep(field.field_options, function(e){ return e.value === fieldValue; });
        if (result.length == 0 && fieldText && fieldValue)
            field.field_options.push({text:fieldText,value:fieldValue});

        flowController.updateFreeformFieldOptions(field);

        if (field.multi_position==true){ // shuffle order
            flowController.shuffleFieldOptions(field.field_options);
        }
    };

    flowController.removeFieldOption = function(internalId,item){
        var field = flowController.findFieldByInternalId(internalId);

        for(var i = 0; i < field.field_options.length; i++) {
            var obj = field.field_options[i];

            if(item.value == obj.value) {
                field.field_options.splice(i, 1);
                i--;
            }
        }

        flowController.updateFreeformFieldOptions(field);

        if (field.multi_position==true){ // shuffle order
            flowController.shuffleFieldOptions(field.field_options);
        }
    };

    flowController.showNamePositionConfigOption = function(fieldType){
        return field.field_type=='Checkbox'
            || field.field_type=='Datepicker'
            || field.field_type=='Timepicker'
            || field.field_type=='Dropdown'
            || field.field_type=='Multiselection'
            || field.field_type=='Radiobutton'
            || field.field_type=='Textarea'
            || field.field_type=='Textfield';
    };

    flowController.showHiddenFieldConfigOption = function(fieldType){
        return field.field_type=='Image'
            || field.field_type=='Textfield';
    };

    flowController.showFlowPage = function(page)
    {
        var currPage = "flow-page-" + page;
        $('div[id ^= "flow-page-"]').hide();
        $("#" + currPage).show();
        $anchorScroll();

        // change selected page
        var currentPageIndex = flowController.findPageIndexByPageId(page);
        if (currentPageIndex > -1){
            selected = scriptPages[currentPageIndex];

            var formName = 'flowPageForm'+selected.page_id;

            // execute gotofield/required field conditions on page in case we have prepopulated data that could affect conditions
            angular.forEach(flowController.allConditions, function(conditionalField, idx){
                if (conditionalField.page == page){
                    var field_options_array = $('<div/>').text(conditionalField.field_options).html().trim().split('\n');
                    for (var i = 0; i < field_options_array.length; i++) {
                        var conditions = field_options_array[i].split('|');

                        if (conditions && conditions.length > 3 &&
                            (
                                (conditions[4] && conditions[4].length > 0 && conditions[4]!='_' && conditions[4]!='_blank') //is a gotofield condition
                                ||
                                (conditions[6] && conditions[6].length > 0 && conditions[6]!='_' && conditions[6]!='_blank') //is a make required condition
                            )){

                            var leftOperand = conditions[0];
                            var operator = conditions[1];
                            var rightOperand = conditions[2];
                            var onlyCheckOnPageLoad = conditions[8];

                            // check for any matching conditions as a result of this data change
                            var fieldCheck = flowController.findFieldByLabel(conditions[0]);
                            if (fieldCheck && (leftOperand == fieldCheck.field_label)) {
                                var conditionTrue = false;

                                console.log(fieldCheck.field_label + ' is a valid condition ' + field_options_array[i] + '...');

                                // prevent null reference exceptions
                                if (!$scope[leftOperand]) {
                                    $scope[leftOperand] = '';
                                }

                                // make sure to evaluate any expression before checking conditions
                                flowController.evaluateExpression(fieldCheck.field_label, formName);

                                if (!rightOperand) rightOperand = '';

                                var rightOperandLCase = rightOperand.toLowerCase();
                                var leftOperandLCase = $scope[leftOperand];

                                // make sure we adjust below if we're dealing with multiselects OR
                                // checkboxes, we'll need to loop through array of values to compare
                                if (fieldCheck.field_type != "DATEPICKER" &&
                                    fieldCheck.field_type != "TIMEPICKER"){

                                    if (!Array.isArray(leftOperandLCase))
                                        leftOperandLCase = leftOperandLCase.toLowerCase();
                                }

                                switch(operator){
                                    case "Equals":
                                        if (Array.isArray(leftOperandLCase)){
                                            for (var key in leftOperandLCase){
                                                if (leftOperandLCase[key].toLowerCase()==rightOperandLCase){
                                                    conditionTrue=true;
                                                }
                                            }
                                        } else {
                                            if (leftOperandLCase==rightOperandLCase){
                                                conditionTrue=true;
                                            }
                                        }
                                        break;
                                    case "NotEquals":
                                        if (Array.isArray(leftOperandLCase)){
                                            conditionTrue = (leftOperandLCase.indexOf(rightOperandLCase) == -1);
                                        } else {
                                            if (leftOperandLCase!=rightOperandLCase){
                                                conditionTrue=true;
                                            }
                                        }
                                        break;
                                    case "Contains":
                                        if (Array.isArray(leftOperandLCase)){
                                            conditionTrue = (leftOperandLCase.indexOf(rightOperandLCase) > -1);
                                        } else {
                                            if (leftOperandLCase.indexOf(rightOperandLCase) > -1){
                                                conditionTrue=true;
                                            }
                                        }
                                        break;
                                    case "NotContains":
                                        if (Array.isArray(leftOperandLCase)){
                                            conditionTrue = (leftOperandLCase.indexOf(rightOperandLCase) == -1);
                                        } else {
                                            if (leftOperandLCase.indexOf(rightOperandLCase) == -1){
                                                conditionTrue=true;
                                            }
                                        }
                                        break;
                                    case "LessThan":
                                        if (leftOperandLCase < rightOperandLCase){
                                            conditionTrue=true;
                                        }
                                        break;
                                    case "GreaterThan":
                                        if (leftOperandLCase > rightOperandLCase){
                                            conditionTrue=true;
                                        }
                                        break;
                                }

                                // execute our branching if condition is met
                                var goToFieldLabel = conditions[4];
                                var makeRequiredFieldLabel = conditions[6];
                                var goToFieldElseLabel = conditions[7];

                                if (conditionTrue){
                                    console.log('...and the condition is true!');

                                    var pageForm = $scope[formName];

                                    if (goToFieldLabel && goToFieldLabel.length > 0 && goToFieldLabel != '_' && goToFieldLabel != '_blank_') {
                                        console.log('going to or showing field ' + goToFieldLabel +
                                            ' if form ' + formName + ' is valid? ' + pageForm.$valid);

                                        flowController.validateAndSubmitForm(pageForm, selected.page_id, null, goToFieldLabel, conditions[5]);

                                    } else if (makeRequiredFieldLabel && makeRequiredFieldLabel.length > 0 && makeRequiredFieldLabel != '_' && makeRequiredFieldLabel != '_blank_'){
                                        $scope[makeRequiredFieldLabel + "_required"] = true;
                                    }

                                    // if we have a goto field else, hide it now
                                    if (goToFieldElseLabel && goToFieldElseLabel.length > 0 && goToFieldElseLabel != '_' && goToFieldElseLabel != '_blank_'){
                                        var conditionFieldElse = flowController.findFieldByLabel(goToFieldElseLabel);
                                        if (conditionFieldElse && conditionFieldElse.field_hidden==true){
                                            $('[id='+conditionFieldElse.field_label+']').parent().closest('div').css({'display':'none'});
                                        }
                                    }
                                } else { // make sure we 'undo' showing this field since the condition is no longer valid

                                    if (goToFieldLabel && goToFieldLabel.length > 0 && goToFieldLabel != '_' && goToFieldLabel != '_blank_'){
                                        var conditionField = flowController.findFieldByLabel(goToFieldLabel);
                                        if (conditionField && conditionField.field_hidden==true){
                                            $('[id='+conditionField.field_label+']').parent().closest('div').css({'display':'none'});
                                        }
                                    } else if (makeRequiredFieldLabel && makeRequiredFieldLabel.length > 0 && makeRequiredFieldLabel != '_' && makeRequiredFieldLabel != '_blank_'){
                                        $scope[makeRequiredFieldLabel + "_required"] = false;
                                    }

                                    // if we have a goto field else, show it now
                                    if (goToFieldElseLabel && goToFieldElseLabel.length > 0 && goToFieldElseLabel != '_' && goToFieldElseLabel != '_blank_'){
                                        var conditionFieldElse = flowController.findFieldByLabel(goToFieldElseLabel);
                                        if (conditionFieldElse && conditionFieldElse.field_hidden==true){
                                            $('[id='+conditionFieldElse.field_label+']').parent().closest('div').css({'display':'block'});
                                            conditionTrue = true;
                                        }
                                    }
                                }

                                if (conditionTrue){
                                    break;
                                }
                            }
                        }
                    }
                }
            });

            // set checkboxes required trigger on page load
            angular.forEach(flowController.allCheckboxes, function(checkBoxField, idx){
                if (checkBoxField.field_required=='Y' && checkBoxField.page == page) {
                    if (Array.isArray($scope[checkBoxField.field_label])){
                        // clear out required errors if we have at least one value
                        if ($scope[checkBoxField.field_label].length > 0)
                            $scope[checkBoxField.field_label+'_required'] = false;
                        else
                            $scope[checkBoxField.field_label+'_required'] = true;
                    } else if (!$scope[checkBoxField.field_label]) {
                        $scope[checkBoxField.field_label] = [];
                        $scope[checkBoxField.field_label+'_required'] = true;
                    }
                }
            });

            // does next page have a default disposition? If so, trigger it now
            // first check if we're on a repeat contact and a default second contact dispo is set
            // otherwise, just check our standard page default dispo
            if (selected.default_disposition_sdr && selected.default_disposition_sdr.length > 0 &&
                ($scope["sys_repeat_new"] == "true" || $scope["sys_repeat_existing"] == "true") ){
                flowController.validateAndPerformAction($scope[formName], selected.page_id, selected.page_id, "AUTODISPOSITION");
            } else if (selected.default_disposition && selected.default_disposition.length > 0){
                flowController.validateAndPerformAction($scope[formName], selected.page_id, selected.page_id, "AUTODISPOSITION");
            }
        }

        // do we have any openiFrameInNewWindow_ prefixes on this page to load? if so, do it now
        var anchorSrc = $('a[id ^="openiFrameInNewWindow_' + page + '_"]');
        if (anchorSrc[0] && anchorSrc[0].href && anchorSrc[0].href.length > 0){
            window.open(anchorSrc[0].href, "FlowPopup", "location=1,status=1,scrollbars=1, resizable=1, directories=1, toolbar=1, titlebar=1");
        }
    };

    flowController.goToFieldAnchor = function(field,scrollToField)
    {
        // if field hidden, show it and then go to it
        // match all label names in case they're reused across pages
        if (field.field_hidden == true){
            $('[id='+field.field_label+']').parent().closest('div').css({'display':'block'});
        }

        if (scrollToField && scrollToField.toLowerCase()=="true"){
            var old = $location.hash();
            $location.hash(field.field_label);
            $anchorScroll();
            $location.hash(old);
        }
    };

    flowController.limitOptions = function (field_label, limit, formName){
        var options = $scope[field_label];

        if (options && options.length > limit){
            options.pop();
        } else {
            flowController.checkGoToFieldConditions(field_label, formName);
        }
    };

    flowController.evaluateExpression = function (field_label, formName){

        angular.forEach(flowController.allCalculations, function(field, idx){
            // if the field in question is either THE expression or is referenced by an expression, let's evalute it...
            if ((field.field_options && field.field_options.indexOf(field_label) > -1) || field.field_label == field_label) {

                var falseResult = false;
                var field_options_array = $('<div/>').text(field.field_options).html().trim().split('\n');

                for (var i = 0; i < field_options_array.length; i++) {
                    var calculations = field_options_array[i].split('|');

                    if (calculations && calculations.length > 2){
                        var leftOperand = calculations[0];
                        var operator = calculations[1];
                        var rightOperand = calculations[2];

                        var fieldCheck = flowController.findFieldByLabel(leftOperand);
                        if (fieldCheck) {

                            // prevent null reference exceptions
                            if (!$scope[leftOperand]) {
                                $scope[leftOperand] = '';
                            }

                            if (!rightOperand) rightOperand = '';

                            var rightOperandLCase = rightOperand.toLowerCase();
                            var leftOperandLCase = $scope[leftOperand];

                            // make sure we adjust below if we're dealing with multiselects OR
                            // checkboxes, we'll need to loop through array of values to compare
                            if (fieldCheck.field_type != "DATEPICKER" &&
                                fieldCheck.field_type != "TIMEPICKER"){

                                if (!Array.isArray(leftOperandLCase))
                                    leftOperandLCase = leftOperandLCase.toLowerCase();
                            }

                            var evaluationResult = false;

                            switch(operator){
                                case "Equals":
                                    if (Array.isArray(leftOperandLCase)){
                                        for (var key in leftOperandLCase){
                                            if (leftOperandLCase[key].toLowerCase()==rightOperandLCase){
                                                evaluationResult=true;
                                            }
                                        }
                                    } else {
                                        if (leftOperandLCase==rightOperandLCase){
                                            evaluationResult=true;
                                        }
                                    }
                                    break;
                                case "NotEquals":
                                    if (Array.isArray(leftOperandLCase)){
                                        evaluationResult = (leftOperandLCase.indexOf(rightOperandLCase) == -1);
                                    } else {
                                        if (leftOperandLCase!=rightOperandLCase){
                                            evaluationResult=true;
                                        }
                                    }
                                    break;
                                case "Contains":
                                    if (Array.isArray(leftOperandLCase)){
                                        evaluationResult = (leftOperandLCase.indexOf(rightOperandLCase) > -1);
                                    } else {
                                        if (leftOperandLCase.indexOf(rightOperandLCase) > -1){
                                            evaluationResult=true;
                                        }
                                    }
                                    break;
                                case "NotContains":
                                    if (Array.isArray(leftOperandLCase)){
                                        evaluationResult = (leftOperandLCase.indexOf(rightOperandLCase) == -1);
                                    } else {
                                        if (leftOperandLCase.indexOf(rightOperandLCase) == -1){
                                            evaluationResult=true;
                                        }
                                    }
                                    break;
                                case "LessThan":
                                    if (leftOperandLCase < rightOperandLCase){
                                        evaluationResult=true;
                                    }
                                    break;
                                case "GreaterThan":
                                    if (leftOperandLCase > rightOperandLCase){
                                        evaluationResult=true;
                                    }
                                    break;
                                case "*":
                                    evaluationResult = leftOperandLCase * rightOperandLCase;
                                    break;
                                case "/":
                                    if (rightOperandLCase > 0)
                                        evaluationResult = leftOperandLCase / rightOperandLCase;
                                    break;
                                case "-":
                                    evaluationResult = leftOperandLCase - rightOperandLCase;
                                    break;
                                case "+":
                                    evaluationResult = leftOperandLCase + rightOperandLCase;
                                    break;
                            }

                            console.log(fieldCheck.field_label + ' was evaluated as part of this expression ' + field_options_array[i] + '...' + evaluationResult);

                            // any false eval renders our evaluation negative
                            if (!evaluationResult)
                                falseResult = true;
                        }
                    }
                }

                // save results to scope field if evaluation completed
                console.log('...and the evaluation resulted in: ' + !falseResult);

                $scope[field.field_label] = (!falseResult).toString();
            }
        });
    };

    flowController.checkGoToFieldConditions = function (field_label, formName, checkBoxValue, ignoreSave){

        // if we're a checkbox whos value was set, make sure required flag is updated according
        var checkBoxAdjusted = false;
        var checkBoxField = flowController.findFieldByLabel(field_label);
        if (checkBoxField.field_type == 'CHECKBOX'){
            if (!Array.isArray($scope[checkBoxField.field_label]) && !$scope[checkBoxField.field_label]){
                $scope[checkBoxField.field_label] = [];
            }

            if (Array.isArray($scope[checkBoxField.field_label])){
                var itemIndex = $scope[checkBoxField.field_label].indexOf(checkBoxValue);
                var isChecked = (itemIndex > -1);
                if (isChecked && !ignoreSave) // ignoreSave stores checked value for checkboxes
                    $scope[checkBoxField.field_label].splice(itemIndex,1);
                else if (ignoreSave)
                    $scope[checkBoxField.field_label].push(checkBoxValue);

                // clear out required errors if we have at least one value
                if ($scope[checkBoxField.field_label].length > 0)
                    $scope[checkBoxField.field_label+'_required'] = false;
                else
                    $scope[checkBoxField.field_label+'_required'] = true;

                checkBoxAdjusted = true;
            }
        }

        // wrap in exception to allow us to break out of angular loop
        var BreakException = {};

        try {
            angular.forEach(flowController.fields, function(field, idx){
                if (field.field_type == 'CONDITION' && field.field_options && field.page == selected.page_id) {
                    var field_options_array = $('<div/>').text(field.field_options).html().trim().split('\n');
                    for (var i = 0; i < field_options_array.length; i++) {
                        var conditions = field_options_array[i].split('|');

                        if (conditions && conditions.length > 3){

                            var leftOperand = conditions[0];
                            var operator = conditions[1];
                            var rightOperand = conditions[2];
                            var onlyCheckOnPageLoad = conditions[8];

                            if (onlyCheckOnPageLoad && (onlyCheckOnPageLoad.toLowerCase()=="true" || onlyCheckOnPageLoad=='1')){
                                continue;
                            }

                            // check for any matching conditions as a result of this data change
                            var fieldCheck = flowController.findFieldByLabel(field_label);
                            //if (fieldCheck && (leftOperand == fieldCheck.field_label)) {
                            if (fieldCheck) {
                                var conditionTrue = false;

                                console.log(fieldCheck.field_label + ' is a valid condition ' + field_options_array[i] + '...');

                                // prevent null reference exceptions
                                if (!$scope[leftOperand]) {
                                    $scope[leftOperand] = '';
                                } else if (Array.isArray($scope[leftOperand])) {
                                    // checkboxes give us the value selected as a param, so let's add it to the array
                                    // since for some reason they're not being added before the ng-change event is returned
                                    if (checkBoxValue && checkBoxValue.length > 0 && !checkBoxAdjusted){
                                        var itemIndex = $scope[leftOperand].indexOf(checkBoxValue);
                                        var isChecked = (itemIndex > -1);
                                        if (isChecked)
                                            $scope[leftOperand].splice(itemIndex,1);
                                        else
                                            $scope[leftOperand].push(checkBoxValue);

                                        // don't need to repeat this process, so set our flag
                                        // (in case we have numerous conditions to loop through)
                                        checkBoxAdjusted = true;

                                        // make sure we clear out any required errors if it's for our checkboxes
                                        // since checkboxes use the same ngModel, that causes us some angular issues
                                        if ($scope[leftOperand].length > 0){
                                            angular.forEach($scope[formName].$error, function(errors, validationName) {
                                                if (validationName == 'required'){
                                                    // work on copy so when we reset the valididy we don't screw up our loop
                                                    var errorsCopy = [];
                                                    angular.copy(errors, errorsCopy);

                                                    angular.forEach(errorsCopy, function(checkBoxElement, ix) {
                                                        if (checkBoxElement.$name==leftOperand){
                                                            // reset validity
                                                            checkBoxElement.$setValidity(validationName, null);
                                                        }
                                                    });
                                                 }
                                            });
                                        }
                                    }
                                }

                                // make sure to evaluate any expression before checking conditions
                                flowController.evaluateExpression(field_label, formName);

                                if (!rightOperand) rightOperand = '';

                                var rightOperandLCase = rightOperand.toLowerCase();
                                var leftOperandLCase = $scope[leftOperand];

                                // make sure we adjust below if we're dealing with multiselects OR
                                // checkboxes, we'll need to loop through array of values to compare
                                if (fieldCheck.field_type != "DATEPICKER" &&
                                    fieldCheck.field_type != "TIMEPICKER"){

                                    if (!Array.isArray(leftOperandLCase))
                                        leftOperandLCase = leftOperandLCase.toLowerCase();
                                }

                                /*
                                if (!Array.isArray(leftOperandLCase) &&
                                    fieldCheck.field_type != "CHECKBOX" &&
                                    fieldCheck.field_type != "RADIOBUTTON" &&
                                    fieldCheck.field_type != "DROPDOWN"){

                                    leftOperandLCase = leftOperandLCase.toLowerCase();
                                }*/

                                switch(operator){
                                    case "Equals":
                                        if (Array.isArray(leftOperandLCase)){
                                            for (var key in leftOperandLCase){
                                                if (leftOperandLCase[key].toLowerCase()==rightOperandLCase){
                                                    conditionTrue=true;
                                                }
                                            }
                                        } else {
                                            if (leftOperandLCase==rightOperandLCase){
                                                conditionTrue=true;
                                            }
                                        }
                                        break;
                                    case "NotEquals":
                                        if (Array.isArray(leftOperandLCase)){
                                            conditionTrue = (leftOperandLCase.indexOf(rightOperandLCase) == -1);
                                        } else {
                                            if (leftOperandLCase!=rightOperandLCase){
                                                conditionTrue=true;
                                            }
                                        }
                                        break;
                                    case "Contains":
                                        if (Array.isArray(leftOperandLCase)){
                                            conditionTrue = (leftOperandLCase.indexOf(rightOperandLCase) > -1);
                                        } else {
                                            if (leftOperandLCase.indexOf(rightOperandLCase) > -1){
                                                conditionTrue=true;
                                            }
                                        }
                                        break;
                                    case "NotContains":
                                        if (Array.isArray(leftOperandLCase)){
                                            conditionTrue = (leftOperandLCase.indexOf(rightOperandLCase) == -1);
                                        } else {
                                            if (leftOperandLCase.indexOf(rightOperandLCase) == -1){
                                                conditionTrue=true;
                                            }
                                        }
                                        break;
                                    case "LessThan":
                                        if (leftOperandLCase < rightOperandLCase){
                                            conditionTrue=true;
                                        }
                                        break;
                                    case "GreaterThan":
                                        if (leftOperandLCase > rightOperandLCase){
                                            conditionTrue=true;
                                        }
                                        break;
                                }

                                // execute our branching if condition is met
                                var goToFieldLabel = conditions[4];
                                var makeRequiredFieldLabel = conditions[6];
                                var goToFieldElseLabel = conditions[7];

                                if (conditionTrue){
                                    console.log('...and the condition is true!');

                                    var pageForm = $scope[formName];

                                    if (goToFieldLabel && goToFieldLabel.length > 0 && goToFieldLabel != '_' && goToFieldLabel != '_blank_') {
                                        console.log('going to or showing field ' + goToFieldLabel +
                                            ' if form ' + formName + ' is valid? ' + pageForm.$valid);

                                        flowController.validateAndSubmitForm(pageForm, selected.page_id, null, goToFieldLabel, conditions[5], ignoreSave);

                                    } else if (makeRequiredFieldLabel && makeRequiredFieldLabel.length > 0 && makeRequiredFieldLabel != '_' && makeRequiredFieldLabel != '_blank_'){
                                        $scope[makeRequiredFieldLabel + "_required"] = true;
                                    }

                                    // if we have a goto field else, hide it now
                                    if (goToFieldElseLabel && goToFieldElseLabel.length > 0 && goToFieldElseLabel != '_' && goToFieldElseLabel != '_blank_'){
                                        var conditionFieldElse = flowController.findFieldByLabel(goToFieldElseLabel);
                                        if (conditionFieldElse && conditionFieldElse.field_hidden==true){
                                            $('[id='+conditionFieldElse.field_label+']').parent().closest('div').css({'display':'none'});
                                        }
                                    }
                                } else { // make sure we 'undo' showing this field since the condition is no longer valid

                                    if (goToFieldLabel && goToFieldLabel.length > 0 && goToFieldLabel != '_' && goToFieldLabel != '_blank_'){
                                        var conditionField = flowController.findFieldByLabel(goToFieldLabel);
                                        if (conditionField && conditionField.field_hidden==true){
                                            $('[id='+conditionField.field_label+']').parent().closest('div').css({'display':'none'});
                                        }
                                    } else if (makeRequiredFieldLabel && makeRequiredFieldLabel.length > 0 && makeRequiredFieldLabel != '_' && makeRequiredFieldLabel != '_blank_'){
                                        $scope[makeRequiredFieldLabel + "_required"] = false;
                                    }

                                    // if we have a goto field else, show it now
                                    if (goToFieldElseLabel && goToFieldElseLabel.length > 0 && goToFieldElseLabel != '_' && goToFieldElseLabel != '_blank_'){
                                        var conditionFieldElse = flowController.findFieldByLabel(goToFieldElseLabel);
                                        if (conditionFieldElse && conditionFieldElse.field_hidden==true){
                                            $('[id='+conditionFieldElse.field_label+']').parent().closest('div').css({'display':'block'});
                                            conditionTrue = true;
                                        }
                                    }
                                }

                                if (conditionTrue){
                                    //throw BreakException;
                                    break;
                                }
                            }
                        } // end if conditions.length > 3
                    }
                } //end foreach fields
            });
        } catch(e){

        }
    };

    flowController.checkGoToPageConditions = function (formName, isNavigationButton, defaultGoToPageId, action, doNotCheckConditions, actionDefault, refreshData){

        if (doNotCheckConditions && doNotCheckConditions.toLowerCase()=="true"){
            if (isNavigationButton && defaultGoToPageId && defaultGoToPageId > 0) {

                if (refreshData == true || (refreshData && refreshData.toLowerCase()=="true")) {
                    // send request to save data and then refresh flow
	                dataService.saveLead($scope, flowController.fields)
	                    .then(function(response){
                        flowController.isLoading = false;

                        flowController.refreshLead(defaultGoToPageId);

	                }, function (error){
	                    flowController.isLoading = false;
                        flowController.refreshLead(defaultGoToPageId);

	                    console.log(error);
	                });
                } else {
                    flowController.showFlowPage(defaultGoToPageId);
                }
            } else if (!isNavigationButton){

                // send request to save data
                dataService.saveLead($scope, flowController.fields)
                    .then(function(response){

                    flowController.isLoading = false;

                }, function (error){
                    flowController.isLoading = false;
                    console.log(error);
                });

                flowController.executeAction(action, defaultGoToPageId, actionDefault);
            }
            return;
        }

        var conditionResults = flowController.evaluateGoToPageConditions (formName, isNavigationButton, action, actionDefault);

        // if our condition took care of nagivation, we can ignore it. Otherwise,
        // we need to  move to the defaultGoToPageId we were supplied, if any
        if (!conditionResults.navigationTriggered
            && conditionResults.failedConditions == 0) {

            if (isNavigationButton && defaultGoToPageId > 0)
                flowController.validateAndSubmitForm($scope[formName], selected.page_id, defaultGoToPageId);
            else if (!isNavigationButton) // is action button
                flowController.validateAndPerformAction($scope[formName], selected.page_id, defaultGoToPageId, action, actionDefault);
        }
    };

    flowController.evaluateGoToPageConditions = function (formName, isNavigationButton, action, actionDefault){

        var fieldsCopy = [];
        angular.copy(flowController.fields, fieldsCopy);

        $scope[formName].$submitted = true;

        // wrap in exception to allow us to break out of angular loop
        var BreakException = {};

        var conditionResults = {
            navigationTriggered:false,
            failedConditions:0,
            invalidConditions:0,
            isNavigationButton:isNavigationButton
        };

        try {
            angular.forEach(flowController.fields, function(field, idx){
                if (field.field_type == 'CONDITION' && field.field_options && field.page == selected.page_id) {
                    var field_options_array = $('<div/>').text(field.field_options).html().trim().split('\n');
                    for (var i = 0; i < field_options_array.length; i++) {
                        var conditions = field_options_array[i].split('|');
                        var conditionTrue = false;

                        if (conditions && conditions.length > 3){

                            var leftOperand = conditions[0];
                            var operator = conditions[1];
                            var rightOperand = conditions[2];
                            var goToField = conditions[4];
                            var onlyCheckOnPageLoad = conditions[8];

                            if (onlyCheckOnPageLoad && (onlyCheckOnPageLoad.toLowerCase()=="true" || onlyCheckOnPageLoad=='1')){
                                continue;
                            }

                            if ( !(goToField && goToField.length > 0)) { // do not process for gotoFields

                                // make sure to evaluate any expression before checking conditions
                                flowController.evaluateExpression(leftOperand, formName);

                                // loop through fields again, search for fields referenced by this condition
                                // to verify the validity
                                try {
                                    angular.forEach(fieldsCopy, function(fieldCheck, idx){
                                        if (leftOperand == fieldCheck.field_label) {

                                            console.log(fieldCheck.field_label + ' is a valid condition ' + field_options_array[i] + '...');

                                            // prevent null reference exceptions
                                            if (!$scope[leftOperand]) {
                                                $scope[leftOperand] = '';
                                            }

                                            if (!rightOperand) rightOperand = '';

                                            var rightOperandLCase = rightOperand.toLowerCase();
                                            var leftOperandLCase = $scope[leftOperand];

                                            // make sure we adjust below if we're dealing with multiselects OR
                                            // checkboxes, we'll need to loop through array of values to compare
                                            if (fieldCheck.field_type != "DATEPICKER" &&
                                                fieldCheck.field_type != "TIMEPICKER"){

                                                if (!Array.isArray(leftOperandLCase))
                                                    leftOperandLCase = leftOperandLCase.toLowerCase();
                                            }

                                            switch(operator){
                                                case "Equals":
                                                    if (Array.isArray(leftOperandLCase)){
                                                        for (var key in leftOperandLCase){
                                                            if (leftOperandLCase[key].toLowerCase()==rightOperandLCase){
                                                                conditionTrue=true;
                                                            }
                                                        }
                                                    } else {
                                                        if (leftOperandLCase==rightOperandLCase){
                                                            conditionTrue=true;
                                                        }
                                                    }
                                                    break;
                                                case "NotEquals":
                                                    if (Array.isArray(leftOperandLCase)){
                                                        conditionTrue = (leftOperandLCase.indexOf(rightOperandLCase) == -1);
                                                    } else {
                                                        if (leftOperandLCase!=rightOperandLCase){
                                                            conditionTrue=true;
                                                        }
                                                    }
                                                    break;
                                                case "Contains":
                                                    if (Array.isArray(leftOperandLCase)){
                                                        conditionTrue = (leftOperandLCase.indexOf(rightOperandLCase) > -1);
                                                    } else {
                                                        if (leftOperandLCase.indexOf(rightOperandLCase) > -1){
                                                            conditionTrue=true;
                                                        }
                                                    }
                                                    break;
                                                case "NotContains":
                                                    if (Array.isArray(leftOperandLCase)){
                                                        conditionTrue = (leftOperandLCase.indexOf(rightOperandLCase) == -1);
                                                    } else {
                                                        if (leftOperandLCase.indexOf(rightOperandLCase) == -1){
                                                            conditionTrue=true;
                                                        }
                                                    }
                                                    break;
                                                case "LessThan":
                                                    if (leftOperandLCase < rightOperandLCase){
                                                        conditionTrue=true;
                                                    }
                                                    break;
                                                case "GreaterThan":
                                                    if (leftOperandLCase > rightOperandLCase){
                                                        conditionTrue=true;
                                                    }
                                                    break;
                                            }

                                            // execute our branching if condition is met
                                            if (conditionTrue){
                                                console.log('...and the condition is true!');

                                                var pageForm = $scope[formName];
                                                var goToPageId = conditions[3];

                                                if (goToPageId && goToPageId.length > 0 && goToPageId != '_') { // "_" == "Blank", so ignore
                                                    console.log('going to page ' + goToPageId +
                                                        ' if form ' + formName + ' is valid? ' + pageForm.$valid);

                                                    if (isNavigationButton)
                                                        conditionResults.navigationTriggered = flowController.validateAndSubmitForm(pageForm, selected.page_id, goToPageId);
                                                    else // is action button
                                                        conditionResults.navigationTriggered = flowController.validateAndPerformAction(pageForm, selected.page_id, goToPageId, action, actionDefault);

                                                    // if we got here and navigation wasn't triggered, most likely validation failed
                                                    if (!conditionResults.navigationTriggered)
                                                        conditionResults.failedConditions++;
                                                }
                                            } else {
                                                conditionResults.invalidConditions++;
                                            }

                                            if (conditionTrue){
                                                throw BreakException;
                                            }
                                        }
                                    });
                                } catch (e){
                                }
                            }
                        } // end if conditions.length > 3

                        if (conditionTrue){
                            break;
                        }
                    }
                } //end foreach fields

                if (conditionResults.navigationTriggered){
                    throw BreakException;
                }
            });
        } catch (e){
        }

        return conditionResults;
    }

    flowController.validateAndSubmitForm = function(pageForm, currentPageId, nextPageId, nextFieldLabel, scrollToField, ignoreSave){
        console.log('page id: ' + currentPageId +
            ' page form ' + pageForm.$name +
            ' is valid: ' + pageForm.$valid +
            ' next page id: ' + nextPageId +
            ' next field label: ' + nextFieldLabel);

        var isValid = pageForm.$valid;
        var ngRequiredName = '';

        if (!isValid && !nextFieldLabel){ // don't check validations on gotofields
            var totalValidationErrors = 0;
            var validationErrorIsNextField = false;

            // check if our next label is the only field with errors, if so skip
            angular.forEach(pageForm.$error, function(errorList,i){
                angular.forEach(errorList, function(error,i){
                    // if the go to field is set, and it's initially a hidden field that is required
                    // let's ignore it's validation if it's in error before checking the form's validity.
                    // otherwise, the form will be invalid and we will not be able to move on

                    if (nextFieldLabel && nextFieldLabel.length > 0){
                        ngRequiredName = nextFieldLabel + '_required';

                        var field = flowController.findFieldByLabel(nextFieldLabel);
                        if (field && field.field_hidden==true && field.field_required=='Y' && error.$name == field.field_label){
                            validationErrorIsNextField = true;
                        }
                    }
                    totalValidationErrors++;
                });
            });

            if (totalValidationErrors == 1 && validationErrorIsNextField){
                isValid = true;
            }
        }

        if (!isValid && !nextFieldLabel){ // show all errors, except if doing gotofield
            pageForm.$submitted = true;
        }
        else if (isValid && flowController.inPreview){ // just navigation without saving since we're in preview mode

            if (nextPageId && nextPageId > 0) {
                flowController.showFlowPage(nextPageId);

                return true;
            }
            else if (nextFieldLabel && nextFieldLabel.length > 0){
                // look for our field on current page first
                var field = flowController.findFieldByLabelAndPage(nextFieldLabel, currentPageId);
                if (!field)
                    field = flowController.findFieldByLabel(nextFieldLabel);
                if (field) {
                    if (ngRequiredName.length > 0) {// re-enable required validation
                        $scope[ngRequiredName] = true;
                    }
                    if (currentPageId != field.page)
                        flowController.showFlowPage(field.page);
                    flowController.goToFieldAnchor(field,scrollToField);

                    return true;
                }
            }
        }
        else {
            // send request to save data
            //flowController.isLoading = true;

            if (!ignoreSave){
                dataService.saveLead($scope, flowController.fields)
                    .then(function(response){

                    flowController.isLoading = false;

                }, function (error){
                    flowController.isLoading = false;
                    console.log(error);
                });
            }

            // if we have another page to go to, do it now
            if (nextPageId && nextPageId > 0) {
                flowController.showFlowPage(nextPageId);

                return true;
            }
            else if (nextFieldLabel && nextFieldLabel.length > 0){
                // look for our field on current page first
                var field = flowController.findFieldByLabelAndPage(nextFieldLabel, currentPageId);
                if (!field)
                    field = flowController.findFieldByLabel(nextFieldLabel);
                if (field) {
                    if (ngRequiredName.length > 0) {// re-enable required validation
                        $scope[ngRequiredName] = true;
                    }
                    if (currentPageId != field.page && isValid)
                        flowController.showFlowPage(field.page);
                    flowController.goToFieldAnchor(field,scrollToField);

                    return true;
                }
            }
        }
    };

    flowController.validateAndPerformAction = function(pageForm, currentPageId, nextPageId, action, actionDefault){
        console.log('page id: ' + currentPageId +
            ' page form ' + pageForm.$name +
            ' is valid: ' + pageForm.$valid +
            ' action: ' + action +
            ' action default: ' + actionDefault);

        var isValid = pageForm.$valid;
        var ngRequiredName = '';

        if (!isValid){ // show all errors
            pageForm.$submitted = true;
            return false;
        }
        else if (isValid && flowController.inPreview){
            return flowController.executeAction(action, nextPageId, actionDefault);
        }
        else if (isValid) {
            // send request to save data
            dataService.saveLead($scope, flowController.fields)
                .then(function(response){

                flowController.isLoading = false;

            }, function (error){
                flowController.isLoading = false;
                console.log(error);
            });

            // execute our action
            return flowController.executeAction(action, nextPageId, actionDefault);
        }
    };

    flowController.executeAction = function(action, nextPageId, actionDefault){
        switch(action){
            case "AUTODISPOSITION":
                // does next page have a default disposition? If so, trigger it now
                var pageHasDefaultDispo = false;
                var pageDefaultDispo = '';
                if (nextPageId && nextPageId > 0){
                    var nextPage = flowController.findPageById(nextPageId);
                    if (nextPage && nextPage.default_disposition && nextPage.default_disposition.length > 0){
                        pageDefaultDispo = nextPage.default_disposition;
                        pageHasDefaultDispo = true;
                    }
                }

                if (pageHasDefaultDispo == true){
                    flowController.isLoading = true;

                    dataService.performAction("DISPOSITION", pageDefaultDispo, flowController.userId, null, null, flowController.leadId, nextPageId)
                        .then(function(response){

                        // reset important vars
                        flowController.isLoading = false;
                        flowController.leadId = 0;
                        flowController.onCall = false;

                        $scope["sys_repeat_new"] = '';
                        $scope["sys_repeat_existing"] = '';

                        // keep an eye out for new calls after a second of dispo
                        // $timeout(flowController.checkForNewCall, 1000);

                        /*

                        // retrieve friendly description of selected disposition and populate in our scope
                        // useful if needed to be used in Flow (e.g. final status page)
                        dataService.getDispositions(flowController.userId,flowController.listId, $scope["queue_id"])
                        .then(function(response){

                            var dispositions = response.data;
                            //TODO: find description of pageDefaultDispo in results

                        });*/

                    }, function (error){
                        flowController.isLoading = false;
                        console.log(error);
                    });
                }
                break;
            case "DISPOSITION":

                if (actionDefault && actionDefault.length > 0){
                    dataService.performAction("DISPOSITION", actionDefault, flowController.userId)
                        .then(function(response){

                        flowController.isLoading = false;
                        flowController.leadId = 0;
                        flowController.onCall = false;

                        $scope["sys_repeat_new"] = '';
                        $scope["sys_repeat_existing"] = '';

                        // keep an eye out for new calls after a second of dispo
                        // $timeout(flowController.checkForNewCall, 1000);

                        if (nextPageId && nextPageId > 0) {
                            flowController.showFlowPage(nextPageId);
                            return true;
                        }

                    }, function (error){
                        flowController.isLoading = false;
                        console.log(error);
                    });
                } else {
                    dataService.getDispositions(flowController.userId,flowController.listId, $scope["queue_id"])
                        .then(function(response){

                        var dispositions = response.data;

                        flowController.isLoading = false;

                        // show list of dispositions to user and allow them to select
                        $mdDialog.show({
                          controller: function DialogController($scope, $mdDialog) {
                            $scope.cancel = function() {
                                $mdDialog.cancel();
                            };
                            $scope.continue = function(disposition, goToPause) {
                                flowController.isLoading = true;

                                dataService.performAction("DISPOSITION", disposition, flowController.userId, null, null, flowController.leadId, null, goToPause)
                                    .then(function(response){

                                    flowController.isLoading = false;
                                    flowController.leadId = 0;
                                    flowController.onCall = false;

                                    $scope["sys_repeat_new"] = '';
                                    $scope["sys_repeat_existing"] = '';

                                    // keep an eye out for new calls after a second of dispo
                                    // $timeout(flowController.checkForNewCall, 1000);

                                    if (nextPageId && nextPageId > 0) {
                                        flowController.showFlowPage(nextPageId);
                                        return true;
                                    }

                                }, function (error){
                                    flowController.isLoading = false;
                                    console.log(error);
                                });

                                $mdDialog.hide();
                            };

                            $scope.dispositions = dispositions;
                          },
                          templateUrl: '../flow/public/templates.views.disposition.dialog.html',
                          parent: angular.element(document.body),
                          clickOutsideToClose:true
                        })
                        .then(function(field) {

                        }, function() {
                            // user cancelled operation
                        });

                    }, function (error){
                        console.log(error);
                    });
                }

                break;
            case "ENDCALL":
            case "HANGUP_XFER":
            case "HANGUP_BOTH":
            case "LEAVE_3WAY_CALL":
                flowController.isLoading = true;

                // send generic action request to service
                dataService.performAction(action, '1', flowController.userId)
                    .then(function(response){

                    flowController.isLoading = false;

                    if (nextPageId && nextPageId > 0) {
                        flowController.showFlowPage(nextPageId);
                        return true;
                    }

                }, function (error){
                    flowController.isLoading = false;
                    console.log(error);
                });
                break;
            case "NEWLEAD":
                flowController.isLoading = true;

                // send end call request to service
                dataService.performAction(action, flowController.leadId, flowController.userId, $scope, flowController.fields)
                    .then(function(response){

                    flowController.isLoading = false;

                    // change to our new lead before refreshing data
                    flowController.leadId = response.data.leadId;

                    // lets refresh the contact info for this new record now...
                    flowController.refreshLead(nextPageId, response.data);

                }, function (error){
                    flowController.isLoading = false;
                    console.log(error);
                });
                break;
            case "SENDEMAIL":
                var email_opts = [];
                if (actionDefault && actionDefault.length > 0) {
                    email_opts = actionDefault.split('~');
                }

                if (email_opts && email_opts.length > 0 && email_opts[0] != 'undefined'){
                    // populate appt date and time if exists
                    if ($scope[email_opts[1]]){
                        email_opts[1] = $scope[email_opts[1]]; //date
                        //console.log('date='+Object.prototype.toString.call(email_opts[1]));

                        if (Object.prototype.toString.call(email_opts[1]) == "[object Date]"){
                            email_opts[1] = email_opts[1].toUTCString();
                            console.log(email_opts[1]);
                        }
                    }

                    if ($scope[email_opts[2]]){
                        email_opts[2] = $scope[email_opts[2]]; //time
                        //console.log('time='+Object.prototype.toString.call(email_opts[2]));

                        if (Object.prototype.toString.call(email_opts[2]) == "[object Date]"){
                            email_opts[2] = email_opts[2].toUTCString();
                            console.log(email_opts[2]);
                        }
                    }

                    // combine all opts and fire away!
                    all_email_opts = email_opts[0] + '~' + email_opts[1] + '~' + email_opts[2] + '~' + email_opts[3];

                    flowController.isLoading = true;

                    dataService.performAction("SENDEMAIL", all_email_opts, flowController.userId, $scope, flowController.fields, flowController.leadId)
                        .then(function(response){

                        flowController.isLoading = false;

                        if (nextPageId && nextPageId > 0) {
                            flowController.showFlowPage(nextPageId);
                            return true;
                        }

                    }, function (error){
                        flowController.isLoading = false;
                        console.log(error);
                    });
                } else {
                    // show list of email templates to user and allow them to select
                    $mdDialog.show({
                      controller: function DialogController($scope, $mdDialog) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.continue = function(emailTemplateId) {

                            // populate appt date and time if exists
                            if ($scope[email_opts[1]])
                                email_opts[1] = $scope[email_opts[1]]; //date

                            if ($scope[email_opts[2]])
                                email_opts[2] = $scope[email_opts[2]]; //time

                            // combine all opts and fire away!
                            all_email_opts = emailTemplateId + '~' + email_opts[1] + '~' + email_opts[2] + '~' + email_opts[3];

                            flowController.isLoading = true;

                            dataService.performAction("SENDEMAIL", all_email_opts, flowController.userId, $scope, flowController.fields, flowController.leadId)
                                .then(function(response){

                                flowController.isLoading = false;

                                if (nextPageId && nextPageId > 0) {
                                    flowController.showFlowPage(nextPageId);
                                    return true;
                                }

                            }, function (error){
                                flowController.isLoading = false;
                                console.log(error);
                            });

                            $mdDialog.hide();
                        };

                        $scope.emailTemplates = flowController.emailTemplates;
                      },
                      templateUrl: '../flow/public/templates.views.emailtemplate.dialog.html',
                      parent: angular.element(document.body),
                      clickOutsideToClose:true
                    })
                    .then(function(field) {

                    }, function() {
                        // user cancelled operation
                    });
                }

                break;
            case "WEBSERVICE":
                flowController.isLoading = true;

                // send end call request to service
                dataService.performAction(action, '1', flowController.userId)
                    .then(function(response){

                    flowController.isLoading = false;

                    if (nextPageId && nextPageId > 0) {
                        flowController.showFlowPage(nextPageId);
                        return true;
                    }

                }, function (error){
                    flowController.isLoading = false;
                    console.log(error);
                });
                break;

            case "XFERCALL":

                var xfer_opts = [];
                if (actionDefault && actionDefault.length > 0) {
                    xfer_opts = actionDefault.split('~');
                }

                if (xfer_opts && xfer_opts.length > 0 && xfer_opts[0] != 'undefined' && xfer_opts[1] != 'undefined'){
                    flowController.isLoading = true;

                    all_xfer_opts = xfer_opts[0] + '~' + xfer_opts[1] + '~' + xfer_opts[3];

                    dataService.performAction("XFERCALL", all_xfer_opts, flowController.userId)
                        .then(function(response){

                        flowController.isLoading = false;

                        // if we're asking to send dtmf, let's wait for up to 5 seconds and then do so
                        if (xfer_opts[2] && xfer_opts[2].length > 0){
                            $timeout(function(){
                                dataService.performAction("SENDDTMF", xfer_opts[2], flowController.userId)
                                    .then(function(response){
                                }, function (error){
                                    console.log(error);
                                });
                            }, 5000);
                        }

                        if (nextPageId && nextPageId > 0) {
                            flowController.showFlowPage(nextPageId);
                            return true;
                        }

                    }, function (error){
                        flowController.isLoading = false;
                        console.log(error);
                    });
                } else {
                    // show list of xfer options to user and allow them to customize
                    $mdDialog.show({
                      controller: function DialogController($scope, $mdDialog) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };

                        $scope.continue = function(xferType, xferNumber, xferQueue) {
                            flowController.isLoading = true;

                            xfer_opts = xferType + '~' + xferNumber + '~' + xferQueue;

                            dataService.performAction("XFERCALL", xfer_opts, flowController.userId)
                                .then(function(response){

                                flowController.isLoading = false;

                                if (nextPageId && nextPageId > 0) {
                                    flowController.showFlowPage(nextPageId);
                                    return true;
                                }

                            }, function (error){
                                flowController.isLoading = false;
                                console.log(error);
                            });

                            $mdDialog.hide();
                        };

                        $scope.acdQueues = flowController.acdQueues;
                      },
                      templateUrl: '../flow/public/templates.views.xfertemplate.dialog.html',
                      parent: angular.element(document.body),
                      clickOutsideToClose:true
                    })
                    .then(function(field) {

                    }, function() {
                        // user cancelled operation
                    });
                }

                break;
        }
    };

    flowController.isFieldEmpty = function(field_label, page){
        var result = false;

        if ($scope[field_label + '_required'] == true){
            if (selected && selected.page_id == page && field_label != ''){
                if ($scope[field_label] || $scope[field_label]=='')
                    result = $scope[field_label].length == 0;
            }
        }

        return result;
    }

    // system field for tracking seconds spent in idle
    // used by Timer control to display idle time
    $scope.timeInIdle = 0;
    flowController.tickIdleTime = function () {
        $scope.timeInIdle += 1000;

        $timeout(tickIdleTime, 1000);
    }

    flowController.householdingRecords = [];
    flowController.householdingRecordsCurrentPage = [];
    flowController.householdingRecordsFetched = false;
    flowController.householdingItemsPerPage = 5;

    flowController.householdingPager = {};
    flowController.householdingSetCurrentPage = function(pg){
        if (pg < 1 || pg > flowController.householdingPager.totalPages) {
            return;
        }

        // get pager object from service
        flowController.householdingPager = pagerService.GetPager(flowController.householdingRecords.length, pg, flowController.householdingItemsPerPage);

        // get current page of items
        flowController.householdingRecordsCurrentPage = flowController.householdingRecords.slice(flowController.householdingPager.startIndex, flowController.householdingPager.endIndex + 1);

        console.log('finished fetching pages...');
    }

    flowController.dispoHouseholdingRecord = function(householdingLeadId, dispo, dispoType, lookupFieldName, lookupScope){
        console.log('dispoing householding record lead ('+householdingLeadId+') to ('+dispo+')...');

        dataService.dispoHouseholdingRecord(householdingLeadId, flowController.leadId, dispo, flowController.userId, dispoType, lookupFieldName, $scope[lookupFieldName], lookupScope)
            .then(function(response){

            if (dispoType == "SINGLE"){ // now remove lead from list
                angular.forEach(flowController.householdingRecords, function(rec,ix){
                    if (rec.leadId == householdingLeadId){
                        console.log('deleting household record id ' + rec.leadId + ' locally after dispo applied ' + dispo);
                        flowController.householdingRecords.splice(ix, 1);

                        // update listings, if any
                        flowController.householdingRecordsCurrentPage = flowController.householdingRecords.slice(flowController.householdingPager.startIndex, flowController.householdingPager.endIndex + 1);
                    }
                });
            } else { // now remove all other lead from list
                flowController.householdingRecords = [];
                flowController.householdingSetCurrentPage(1);
            }
        });
    }

    flowController.getHouseholdingRecords = function(lookupFieldName, controlPageId, lookupScope, itemsPerPage){

        flowController.householdingItemsPerPage = itemsPerPage;

        if (flowController.householdingRecordsFetched == false) {
            console.log('fetching householding records by field ('+lookupFieldName+') for lead ('+flowController.leadId+') in scope ('+lookupScope+')...');

            flowController.householdingRecordsFetched = true;

            dataService.getHouseholdingRecords(flowController.leadId, flowController.listId, lookupFieldName, $scope[lookupFieldName], flowController.userId, lookupScope)
                .then(function(response){

                flowController.householdingRecords = response.data;
                flowController.householdingSetCurrentPage(1);
            });
        }

        return flowController.householdingRecords;
    }

    flowController.refreshToHouseholdingLead = function (householdingLeadId) {

        if (householdingLeadId > 0){
            console.log('changing from lead (' + flowController.leadId + ') to householding record ('+householdingLeadId+')...');

            flowController.householdingRecordsFetched = false;
            flowController.leadId = householdingLeadId;

            flowController.refreshLead();
        }
    }

    // continously ping back end to check for new call deliver so we can
    // refresh the lead info. we'll stop once we get a lead
    flowController.checkForNewCall = function () {
        dataService.checkUserStatus(flowController.userId, $scope.uniqueid)
            .then(function(response){

            var statusData = response.data;

            if (statusData.leadId > 0 && statusData.flowId > 0
                && (statusData.status == 'INCALL' || statusData.status == 'QUEUE')
                && flowController.leadId != statusData.leadId) {

                // make sure we're not still handling a call or second contact
                if (!flowController.onCall) {
                    flowController.onCall = true;

                    // refresh data but only if we're on the same flow. otherwise
                    // the agent UI will have already reloaded us entirely
                    if (flowController.flowId == statusData.flowId) {
                        flowController.householdingRecordsFetched = false;

                        flowController.listId = statusData.listId;
                        flowController.leadId = statusData.leadId;

                        flowController.refreshLead();
                    }
                }
            } else if (statusData.status == 'READY' && statusData.leadId == 0
                && statusData.flowId == 0 && flowController.leadId > 0) {

                flowController.leadId = 0;
                flowController.listId = 0;
                flowController.onCall = false;
            }

            // keep an eye out for actions that occur outside of Flow
            $timeout(flowController.checkForNewCall, 700);
        }, function (error){
            console.log(error);
            $timeout(flowController.checkForNewCall, 700);
        });
    }

    // request new lead for this flow w/o refreshing the entire flow fields&logic&etc
    flowController.refreshLead = function (nextPageId, secondRequest) {

        dataService.getLead(flowController.leadId, flowController.listId, flowController.userId, flowController.flowId, flowController.inPreview)
            .then(function(response){

            // clear any data entry vars before proceeding...
            angular.forEach(flowController.fields, function(field,ix){
                if (field.field_type == "TEXTFIELD" ||
                            field.field_type == "TEXTAREA" ||
                            field.field_type == "DROPDOWN" ||
                            field.field_type == "MULTISELECTION" ||
                            field.field_type == "RADIOBUTTON" ||
                            field.field_type == "CHECKBOX" ||
                            field.field_type == "DATEPICKER" ||
                            field.field_type == "TIMEPICKER") {
                    $scope[field.field_label] = "";
                }
            });

            var leadObj = response.data;

            // setup defaults
            angular.forEach(flowController.fields, function(field,ix){
                if (field.field_required == 'Y' || field.field_required == true) {
                    if (field.field_hidden == 'Y' || field.field_hidden == true)
                        $scope[field.field_label + '_required'] = false;
                    else
                        $scope[field.field_label + '_required'] = true;
                } else if (field.field_type == "TEXTFIELD" ||
                            field.field_type == "TEXTAREA" ||
                            field.field_type == "DROPDOWN" ||
                            field.field_type == "MULTISELECTION" ||
                            field.field_type == "RADIOBUTTON" ||
                            field.field_type == "CHECKBOX" ||
                            field.field_type == "DATEPICKER" ||
                            field.field_type == "TIMEPICKER") { // in case we need to make this field required later
                    $scope[field.field_label + '_required'] = false;
                }

                if (field.field_type == "TEXTFIELD"
                    && field.field_default && field.field_default.length > 0){

                    $scope[field.field_label] = field.field_default;
                }
           });

            // refresh scope data
            if (Array.isArray(leadObj)){
                angular.forEach(leadObj, function(lead,l){
                    var standardField = true;

                    try {
                        angular.forEach(flowController.fields, function(field,ix){
                            if (lead.Key && (lead.Key == field.field_label)) {
                                standardField = false;

                                if (field.field_type == "TEXTFIELD" ||
                                    field.field_type == "TEXTAREA" ||
                                    field.field_type == "DROPDOWN" ||
                                    field.field_type == "MULTISELECTION" ||
                                    field.field_type == "RADIOBUTTON" ||
                                    field.field_type == "CHECKBOX" ||
                                    field.field_type == "DATEPICKER" ||
                                    field.field_type == "TIMEPICKER") {

                                    // account for array values
                                    if (field.field_type=="CHECKBOX" ||
                                        field.field_type=="RADIOBUTTON" ||
                                        field.field_type=="MULTISELECTION" ||
                                        field.field_type=="RADIOBUTTON")
                                    {
                                        if (!(lead.Value == null || lead.Value == '')){
                                            lead.Value = lead.Value.split(',');
                                        }
                                    }

                                    $scope[lead.Key] = lead.Value;
                                }

                                throw BreakException;
                            }
                        });
                    } catch (e){
                    }

                    if (standardField && lead.Key){
                        $scope[lead.Key] = lead.Value;
                    }
                });
            } else {
                for (var k in leadObj) {
                    var field = '';

                    try {
                        angular.forEach(flowController.fields, function(fld, idx){
                            if (fld.field_label == k){
                                field = fld;
                                throw BreakException;
                            }
                        });
                    } catch (e){
                    }

                    // account for array values
                    if (field.field_type=="CHECKBOX" ||
                        field.field_type=="RADIOBUTTON" ||
                        field.field_type=="MULTISELECTION" ||
                        field.field_type=="RADIOBUTTON")
                    {
                        if (!(leadObj[k] == null || leadObj[k] == '')){
                            leadObj[k] = leadObj[k].split(',');
                        }
                    }

                    $scope[k] = leadObj[k];
                }
            }

            // refresh any script fields
            angular.forEach(flowController.scriptFieldsWithVariables, function(field,l){
                // replace vars
                if (field.field_options_orig && field.field_options_orig.length > 0){
                    field.updatedScriptVerbiage = field.field_options_orig;
                    if (Array.isArray(leadObj)){
                        angular.forEach(leadObj, function(lead,l){
                            var variableName = '[' + lead.Key + ']';
                            if (field.field_options_orig.indexOf(variableName) > -1){
                                // if this field has options (e.g. checkbox, dropdown), show the Text, not the Value
                                var lookupFieldText = '';
                                var lookupFieldRef = null;
                                try{
                                    angular.forEach(flowController.fields, function(lookupField,ix){
                                        if (lookupField.field_label == lead.Key){
                                            lookupFieldRef = lookupField;

                                            if (lookupField.field_type == "DROPDOWN" ||
                                                lookupField.field_type == "MULTISELECTION" ||
                                                lookupField.field_type == "RADIOBUTTON" ||
                                                lookupField.field_type == "CHECKBOX"){

                                                if (lookupField.field_options){
                                                    var lookupFieldOpts = '';
                                                    var isArray = Array.isArray(lookupField.field_options);
                                                    if (isArray)
                                                        lookupFieldOpts = lookupField.field_options;
                                                    else
                                                        lookupFieldOpts = lookupField.field_options.split('\n');

                                                    var lookupFieldOptsIndex = 0;

                                                    while (lookupFieldOptsIndex < lookupFieldOpts.length)
                                                    {
                                                        if (isArray){
                                                            if (lookupFieldOpts[lookupFieldOptsIndex].value==lead.Value)
                                                            {
                                                                lookupFieldText = lookupFieldOpts[lookupFieldOptsIndex].text;
                                                                break;
                                                            }
                                                        } else {
                                                            var optKeyValue = lookupFieldOpts[lookupFieldOptsIndex].split('~');

                                                            if (optKeyValue.length == 2)
                                                            {
                                                                if (Array.isArray(lead.Value) && lead.Value.length > 1){
                                                                    try{
                                                                        angular.forEach(lead.Value, function(arrayItem,idx){
                                                                            if (optKeyValue[0]==arrayItem) {
                                                                                lookupFieldText += optKeyValue[1] + '<br />';
                                                                                throw BreakException;
                                                                            }
                                                                        });
                                                                    } catch (e){
                                                                    }
                                                                }
                                                                else if (optKeyValue[0]==lead.Value) {
                                                                    lookupFieldText = optKeyValue[1];
                                                                    break;
                                                                }
                                                            }
                                                        }

                                                        lookupFieldOptsIndex++;
                                                    }
                                                }
                                            }

                                            throw BreakException;
                                        }
                                    });
                                } catch (e){
                                }

                                // if our script is referencing a text box, us ngBind to replace
                                // the variable in our script. Just in case users change the data, ngBind will reflect that
                                variableName = variableName.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
                                if (lookupFieldRef && (lookupFieldRef.field_type=="TEXTFIELD" || lookupFieldRef.field_type=="TEXTAREA")){
                                    var bindTo = "<span ng-bind=\"" + lead.Key + "\"></span>";
                                    field.updatedScriptVerbiage = field.updatedScriptVerbiage.replace(new RegExp(variableName, 'g'), bindTo);
                                } else {
                                    if (lookupFieldText==''){
                                        field.updatedScriptVerbiage = field.updatedScriptVerbiage.replace(new RegExp(variableName, 'g'), lead.Value);
                                    } else {
                                        field.updatedScriptVerbiage = field.updatedScriptVerbiage.replace(new RegExp(variableName, 'g'), lookupFieldText);
                                    }
                                }
                            }
                        });
                    }
                    else {
                        for (var key in leadObj) {
                            var variableName = '[' + key + ']';
                            if (field.field_options_orig.indexOf(variableName) > -1){
                                // if this field has options (e.g. checkbox, dropdown), show the Text, not the Value
                                var lookupFieldText = '';
                                var lookupFieldRef = null;
                                try{
                                    angular.forEach(flowController.fields, function(lookupField,ix){
                                        if (lookupField.field_label == key){
                                            lookupFieldRef = lookupField;

                                            if (lookupField.field_type == "DROPDOWN" ||
                                                lookupField.field_type == "MULTISELECTION" ||
                                                lookupField.field_type == "RADIOBUTTON" ||
                                                lookupField.field_type == "CHECKBOX"){

                                                if (lookupField.field_options){
                                                    var lookupFieldOpts = '';
                                                    var isArray = Array.isArray(lookupField.field_options);
                                                    if (isArray)
                                                        lookupFieldOpts = lookupField.field_options;
                                                    else
                                                        lookupFieldOpts = lookupField.field_options.split('\n');

                                                    var lookupFieldOptsIndex = 0;

                                                    while (lookupFieldOptsIndex < lookupFieldOpts.length)
                                                    {
                                                        if (isArray){
                                                            if (lookupFieldOpts[lookupFieldOptsIndex].value==leadObj[key])
                                                            {
                                                                lookupFieldText = lookupFieldOpts[lookupFieldOptsIndex].text;
                                                                break;
                                                            }
                                                        } else {
                                                            var optKeyValue = lookupFieldOpts[lookupFieldOptsIndex].split('~');

                                                            if (optKeyValue.length == 2)
                                                            {
                                                                if (Array.isArray(leadObj[key]) && leadObj[key].length > 1){
                                                                    try{
                                                                        angular.forEach(leadObj[key], function(arrayItem,idx){
                                                                            if (optKeyValue[0]==arrayItem) {
                                                                                lookupFieldText += optKeyValue[1] + '<br />';
                                                                                throw BreakException;
                                                                            }
                                                                        });
                                                                    } catch (e){
                                                                    }
                                                                }
                                                                else if (optKeyValue[0]==leadObj[key]) {
                                                                    lookupFieldText = optKeyValue[1];
                                                                    break;
                                                                }
                                                            }
                                                        }

                                                        lookupFieldOptsIndex++;
                                                    }
                                                }
                                            }

                                            throw BreakException;
                                        }
                                    });
                                } catch (e){
                                }

                                // if our script is referencing a text box, us ngBind to replace
                                // the variable in our script. Just in case users change the data, ngBind will reflect that
                                variableName = variableName.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
                                if (lookupFieldRef && (lookupFieldRef.field_type=="TEXTFIELD" || lookupFieldRef.field_type=="TEXTAREA")){
                                    var bindTo = "<span ng-bind=\"" + key + "\"></span>";
                                    field.updatedScriptVerbiage = field.updatedScriptVerbiage.replace(new RegExp(variableName, 'g'), bindTo);
                                } else {
                                    if (lookupFieldText==''){
                                        field.updatedScriptVerbiage = field.updatedScriptVerbiage.replace(new RegExp(variableName, 'g'), leadObj[key]);
                                    } else {
                                        field.updatedScriptVerbiage = field.updatedScriptVerbiage.replace(new RegExp(variableName, 'g'), lookupFieldText);
                                    }
                                }
                            }
                        }
                   }

                   var scriptElement = $('#' + field.field_label);
                   scriptElement.html(field.updatedScriptVerbiage);
                   $compile(scriptElement.contents())($scope);
                }
            });

            if (secondRequest){
                // setup our system flags for tracking second requests
                $scope["sys_repeat_new"] = secondRequest.isNewLead ? "true" : "false";
                $scope["sys_repeat_existing"] = secondRequest.isNewLead ? "false" : "true";

                // update any fields set to show/hide on second requests
                angular.forEach(flowController.hideOnRepeatFields, function(fieldToHide,ix){
                    $('#'+fieldToHide.field_label).parent().closest('div').css({'display':'none'});
                    flowController.hideOnRepeatFieldsAffected.push(fieldToHide);
                });

                angular.forEach(flowController.showOnRepeatFields, function(fieldToShow,ix){
                    $('#'+fieldToShow.field_label).parent().closest('div').css({'display':'block'});
                });
            } else {
                // reset any fields hidden by second request. conditions, if any, will address subsequently
                angular.forEach(flowController.hideOnRepeatFieldsAffected, function(field,ix){
                    $('#'+field.field_label).parent().closest('div').css({'display':'block'});
                });
            }

            if (nextPageId && nextPageId > 0)
                flowController.showFlowPage(nextPageId);
            else
                flowController.showFlowPage(scriptPages[0].page_id);
        });
    }

    flowController.renderFlow = function(isPreview, secondRequest, nextPageId) {

        if (isPreview){
            $('#flowFieldsPreview').html('');
            flowController.householdingRecordsFetched = false;
        } else {
            $('#flowFieldsRendered').html('');

            if (!secondRequest){
                $scope["sys_repeat_new"] = "";
                $scope["sys_repeat_existing"] = "";
            }
        }

        flowController.isLoading = true;

        // retrieve or create lead for this interaction
        dataService.getLead(flowController.leadId, flowController.listId, flowController.userId, flowController.flowId, isPreview)
            .then(function(response){

            var leadObj = response.data;

            var service = dataService.getFlowFields(flowController.flowId);
            service.then(function(response){
                // exception to allow us to break out of angular loop
                var BreakException = {};

                var data = response.data;

                // bind lead data to scope
                if (Array.isArray(leadObj)){
                    angular.forEach(leadObj, function(lead,l){
                        var standardField = true;

                        try {
                            angular.forEach(data, function(field,ix){
                                if (lead.Key && (lead.Key == field.field_label)) {
                                    standardField = false;

                                    if (field.field_type == "TEXTFIELD" ||
                                        field.field_type == "TEXTAREA" ||
                                        field.field_type == "DROPDOWN" ||
                                        field.field_type == "MULTISELECTION" ||
                                        field.field_type == "RADIOBUTTON" ||
                                        field.field_type == "CHECKBOX" ||
                                        field.field_type == "DATEPICKER" ||
                                        field.field_type == "TIMEPICKER") {

                                        // account for array values
                                        if (field.field_type=="CHECKBOX" ||
                                            field.field_type=="RADIOBUTTON" ||
                                            field.field_type=="MULTISELECTION" ||
                                            field.field_type=="RADIOBUTTON")
                                        {
                                            if (lead.Value == null || lead.Value == ''){
                                                lead.Value = [];
                                            } else {
                                                lead.Value = lead.Value.split(',');
                                            }
                                        }

                                        $scope[lead.Key] = lead.Value;
                                    }

                                    throw BreakException;
                                }
                            });
                        } catch (e){
                        }

                        if (standardField && lead.Key){
                            $scope[lead.Key] = lead.Value;
                        }
                    });
                } else {
                    for (var k in leadObj) {
                        var field = '';

                        try {
                            angular.forEach(data, function(fld, idx){
                                if (fld.field_label == k){
                                    field = fld;
                                    throw BreakException;
                                }
                            });
                        } catch (e){
                        }

                        // account for array values
                        if (field.field_type=="CHECKBOX" ||
                            field.field_type=="RADIOBUTTON" ||
                            field.field_type=="MULTISELECTION" ||
                            field.field_type=="RADIOBUTTON")
                        {
                            if (leadObj[k] == null || leadObj[k] == ''){
                                leadObj[k] = [];
                            } else {
                                leadObj[k] = leadObj[k].split(',');
                            }
                        }

                        $scope[k] = leadObj[k];
                    }
                }

                var firstPage = '1';
                var onPage = '1';
                var thisPage = '1';

                if (data.length > 0){
                    thisPage = data[0].page;
                    onPage = data[0].page;
                    firstPage = onPage;
                }

                var divPageOutput = '<div id=flow-page-'+thisPage+'><md-content layout-padding layout="column">';

                var pageBg = '';
                var currentPage = flowController.findPageById(thisPage);
                if (currentPage && currentPage.page_bg_color && currentPage.page_bg_color.length > 0){
                    pageBg = " style='background-color: " + currentPage.page_bg_color + "'";
                }

                divPageOutput += '<form name="flowPageForm'+thisPage+'" ' + pageBg + ' novalidate>';
                var formOutput = '';

                // build out preview of flow
                if (data.length > 0){
                    angular.forEach(data, function(field,ix){

                        var isDataEntryField = field.field_type == "TEXTFIELD" ||
                                field.field_type == "TEXTAREA" ||
                                field.field_type == "DROPDOWN" ||
                                field.field_type == "MULTISELECTION" ||
                                field.field_type == "RADIOBUTTON" ||
                                field.field_type == "CHECKBOX" ||
                                field.field_type == "DATEPICKER" ||
                                field.field_type == "TIMEPICKER";

                        thisPage = field.page;
                        formOutput = '';
                        if (thisPage != onPage) {

                            //end of each page
                            onPage = field.page;
                            divPageOutput += '</form></div>';
                            var compiledOutput = $compile(divPageOutput)($scope);
                            if (isPreview)
                                $('#flowFieldsPreview').append(compiledOutput);
                            else
                                $('#flowFieldsRendered').append(compiledOutput);
                            divPageOutput = '';
                            formOutput = '';

                            //start new div for new page
                            divPageOutput = '<div id=flow-page-' + onPage + '><md-content layout-padding layout="column">';

                            pageBg = '';
                            currentPage = flowController.findPageById(onPage);
                            if (currentPage && currentPage.page_bg_color && currentPage.page_bg_color.length > 0){
                                pageBg = " style='background-color: " + currentPage.page_bg_color + "'";
                            }

                            divPageOutput += '<form name="flowPageForm'+onPage+'" ' + pageBg + ' novalidate>';
                        }

                        var formName = 'flowPageForm'+thisPage;

                        var field_options = '';

                        if (field.field_options) {
                            field_options_array = $('<div/>').text(field.field_options).html().trim().split('\n');

                            if (field.field_type == "SCRIPT" ||
                                field.field_type == "TEXTAREA" ||
                                field.field_type == "IFRAME" ||
                                field.field_type == "CALCULATION"){

                                field_options = field_options_array[0].trim();
                            } else if (field.field_type != "CONDITION") {

                                for (var i = 0; i < field_options_array.length; i++) {
                                  field_options += field_options_array[i].trim() + '|';
                                }
                            }
                        }

                        // save all conditions in separate array
                        if (field.field_type == "CONDITION")
                            flowController.allConditions.push(field);

                        // save all calculations in separate array
                        if (field.field_type == "CALCULATION")
                            flowController.allCalculations.push(field);

                        // save all check boxes in separate array
                        if (field.field_type == "CHECKBOX" || field.field_type == "MULTISELECTION")
                            flowController.allCheckboxes.push(field);

                        if (!field.field_name) field.field_name = '';
                        if (field.name_position) field.name_position = field.name_position.toLowerCase();
                        if (field.field_default == "NULL" || field.field_default == null) field.field_default = '';

                        // if we have data in our scope for this field, replace the default with it now...
                        if ($scope[field.field_label] && $scope[field.field_label] != '' && $scope[field.field_label].length > 0)
                            field.field_default = $scope[field.field_label];
                        else if (field.field_type == "TEXTFIELD"
                            && field.field_default && field.field_default.length > 0){

                            $scope[field.field_label] = field.field_default;
                        }

                        var hidden = '';
                        if (field.field_hidden == 'Y' && field.field_type != "CONDITION" && field.field_type != "CALCULATION"){
                            hidden = "display:none;";
                        }
                        if (field.field_help=="HIDE_ON_REPEAT")
                            flowController.hideOnRepeatFields.push(field);

                        if (field.field_help=="SHOW_ON_REPEAT")
                            flowController.showOnRepeatFields.push(field);

                        if (isDataEntryField) {

                            var optsLayout = '';
                            if (field.name_position=="block"){
                                optsLayout = ' flex="100" layout="row" layout-wrap ';
                            }
                            formOutput += "<div " + optsLayout + " style='padding:0px;text-align:"+field.name_position+"!important;"+hidden+"'>";

                            // can't embed these in md-input-container
                            if (field.field_type != "DATEPICKER" && field.field_type != "TIMEPICKER") {

                                // block layout elements manage their own input container rendering
                                if (field.name_position!="block"){
                                    formOutput += "<md-input-container style='padding:0px;margin:10px 0px 10px 0px;'>";
                                }
                            }
                        }

                        if (field.field_type == "TEXTFIELD" ||
                            field.field_type == "TEXTAREA") {
                            formOutput += "<label style='text-align:" + field.name_position + "' for='"+field.field_label+"'>" + field.field_name + "</label>";
                        }

                        // hookup our validations ["Required","MinLength","MaxLength","RegEx","Email","URL","OptionLimit"]
                        var required = '';
                        var requiredMsg = '';
                        if (field.field_required == 'Y') {

                            if (field.field_hidden == 'Y')
                                $scope[field.field_label + '_required'] = false;
                            else
                                $scope[field.field_label + '_required'] = true;

                            required = " ng-required='" + field.field_label + "_required'";
                            requiredMsg = '<p ng-show="flowController.isFieldEmpty(\''+field.field_label+'\','+field.page+') && ' + formName +'.$invalid && ' + formName + '.$submitted " class="error-block" style="margin:0px;">'+ field.field_name + ' is required.</p>';
                        } else if (isDataEntryField) { // in case we need to make this field required later
                            $scope[field.field_label + '_required'] = false;
                            required = " ng-required='" + field.field_label + "_required'";
                            requiredMsg = '<p ng-show="flowController.isFieldEmpty(\''+field.field_label+'\','+field.page+') && ' + formName +'.$invalid && ' + formName + '.$submitted " class="error-block" style="margin:0px;">'+ field.field_name + ' is required.</p>';
                        }

                        var ngMinLength = '';
                        var minLengthMsg = '';
                        if (field.field_validations && field.field_validations.indexOf('MinLength') > -1){
                            ngMinLength = " ng-minlength=" + field.field_min + " ";
                            minLengthMsg = '<p ng-show="'+formName+'.'+field.field_label+'.$error.minlength" class="error-block">'+field.field_name+' is too short ('+field.field_min+' character minimum).</p>'
                        }

                        var ngMaxLength = '';
                        var maxLengthMsg = '';
                        if (field.field_validations && field.field_validations.indexOf('MaxLength') > -1){
                            ngMaxLength = " ng-maxlength=" + field.field_max + " ";
                            maxLengthMsg = '<p ng-show="'+formName+'.'+field.field_label+'.$error.maxlength" class="error-block">'+field.field_name+' is too long ('+field.field_max+' character maximum).</p>'
                        }

                        var ngPattern = '';
                        var ngInputType = 'text';
                        var ngInputValidationMsg = '';
                        if (field.field_validations && field.field_validations.indexOf('Email') > -1){
                            ngInputType = 'email';
                            ngInputValidationMsg = '<p ng-show="' + formName + '.'+field.field_label+'.$invalid && !' + formName + '.'+field.field_label+'.$pristine" class="error-block">'+ field.field_name + ' must be a valid email address.</p>';
                        }
                        else if (field.field_validations && field.field_validations.indexOf('URL') > -1){
                            //ngPattern = ' ng-pattern="/^(https?:\/\/)?([\dA-Za-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/" ';
                            ngPattern = ' ng-pattern="/^(http[s]?:\/\/){0,1}(www\.){0,1}[a-zA-Z0-9\.\-]+\.[a-zA-Z]{2,5}[\.]{0,1}/" ';
                            ngInputValidationMsg = '<p ng-show="' + formName + '.'+field.field_label+'.$invalid && !' + formName + '.'+field.field_label+'.$pristine" class="error-block">'+ field.field_name + ' must be a valid URL.</p>';
                        }

                        if (field.field_validations && field.field_validations.indexOf('RegEx') > -1){
                            ngPattern = ' ng-pattern="' + field.field_pattern + '" ';
                            ngInputValidationMsg = '<p ng-show="' + formName + '.'+field.field_label+'.$invalid && !' + formName + '.'+field.field_label+'.$pristine" class="error-block">'+ field.field_name + ' does not match the required format.</p>';
                        }

                        var ngChange = '';

                        if (field.field_type == "MULTISELECTION") {

                            if (field.field_validations && field.field_validations.indexOf('OptionLimit') > -1){
                                ngChange = ' ng-change = \"flowController.limitOptions(\''+field.field_label+'\','+ field.field_max+',\''+formName+'\');\" ';
                            } else {
                                ngChange = ' ng-change=\"flowController.checkGoToFieldConditions(\''+field.field_label+'\',\''+formName+'\')\" ';
                            }
                        }

                        if (field.field_name && field.field_name.length > 0) {
                            if (field.field_type == "RADIOBUTTON" && field.name_position=="block") {
                                formOutput += "<label flex='auto' style='margin-top:20px;font-weight:bold;' for='"+field.field_label+"'>" + field.field_name + "</label>";
                            }
                        }

                        // build out fields based on type
                        if (field.field_type == "DROPDOWN"){
                            formOutput += "<md-select id='" + field.field_label + "' name='" + field.field_label + "' ng-model='" + field.field_label + "'" + required + " ng-change=\"flowController.checkGoToFieldConditions('"+field.field_label+"','"+formName+"')\">";
                        }

                        if (field.field_type == "MULTISELECTION"){
                            formOutput += "<md-select multiple id='" + field.field_label + "' size='"+field.field_size+"' name='" + field.field_label + "' ng-model='" + field.field_label + "'" + required + ngChange + ">";
                        }

                        if (field.field_type == "MULTISELECTION" || field.field_type == "DROPDOWN" || field.field_type == "RADIOBUTTON" || field.field_type == "CHECKBOX"){

                            var optionsLayout = '';

                            if (field.field_type == "RADIOBUTTON") {
                                if (field.name_position=="block"){
                                    optionsLayout = ' layout="row" style="margin-top:15px;" flex="auto" ';
                                }
                                formOutput += "<md-radio-group name='" + field.field_label + "'" + optionsLayout + " id='"+field.field_label+"' ng-model='"+field.field_label+"'" + required+ " ng-change=\"flowController.checkGoToFieldConditions('"+field.field_label+"','"+formName+"')\">";
                            }


                            var fieldOpts = '';
                            if (field.field_options)
                                fieldOpts = field.field_options.split('\n');
                            var fieldOptsIndex = 0;

                            if (field.multi_position=='RANDOMIZE' && fieldOpts.length>0) {
                                flowController.shuffleFieldOptions(fieldOpts);
                            }

                            while (fieldOptsIndex < fieldOpts.length)
                            {
                                var optionKeyValue = fieldOpts[fieldOptsIndex].split('~');

                                if (optionKeyValue.length == 2)
                                {
                                    if (field.field_type == "MULTISELECTION" || field.field_type == "DROPDOWN"){
                                        var selected = '';
                                        if (field.field_default == optionKeyValue[0]) selected = 'selected';

                                        formOutput += "<md-option value=\"" + optionKeyValue[0] + "\" " + selected + ">&nbsp;" + optionKeyValue[1] + "</md-option>";
                                    } else if (field.field_type == "CHECKBOX"){

                                        if (field.name_position=="block"){
                                            formOutput += "<md-input-container>";
                                            optionsLayout = ' style="width:300px" ';
                                        } else {
                                            optionsLayout = ' layout="column" ';
                                        }

                                        formOutput += "<md-checkbox checklist-model='"+field.field_label+"'" + optionsLayout + " layout-align='start start' name='"+field.field_label+ "' id='"+field.field_label+ "' " + required + " value=\"" + optionKeyValue[0] + "\" ng-change=\"flowController.checkGoToFieldConditions('"+field.field_label+"','"+formName+"','"+optionKeyValue[0]+"',checked)\">" + optionKeyValue[1] + "</md-checkbox>";

                                        if (field.name_position=="block"){
                                            formOutput += "</md-input-container>";
                                        }

                                    } else if (field.field_type == "RADIOBUTTON"){
                                        formOutput += "<md-radio-button ng-model='field.field_label' name='"+field.field_label+ "' id='"+field.field_label +"' value=\"" + optionKeyValue[0] + "\">" + optionKeyValue[1] + "</md-radio-button>";

                                   }
                                }
                                fieldOptsIndex++;
                            }

                            if (field.field_type == "RADIOBUTTON") {
                                formOutput += "</md-radio-group>";
                                $scope[field.field_label] = field.field_default;
                            }

                            if (field.field_type == "MULTISELECTION" || field.field_type == "DROPDOWN")
                                formOutput += "</md-select>";
                        }

                        if (field.field_type == "TEXTFIELD"){
                            var readOnly = "";
                            if (field.field_options && field.field_options.toLowerCase()=="true"){
                                readOnly = " readonly";
                            }
                            formOutput += "<input type='"+ngInputType+"' style='width:" + field.field_size + "px;text-align:" + field.name_position + "' name='" + field.field_label + "' id='" + field.field_label + "' value='" + field.field_default + "' ng-model='" + field.field_label + "'" + required + ngMaxLength + ngMinLength + ngPattern + readOnly + " ng-blur=\"flowController.checkGoToFieldConditions('"+field.field_label+"','"+formName+"')\" />";
                        }

                        if (field.field_type == "TEXTAREA"){
                            formOutput += "<textarea style='text_align:" + field.name_position + "' cols=" + field.field_size + " rows=" + field.field_options + " name='" + field.field_label + "' id='" + field.field_label + "' ng-model='" + field.field_label + "'" + required + ngMaxLength + ngMinLength + " ng-blur=\"flowController.checkGoToFieldConditions('"+field.field_label+"','"+formName+"')\"></textarea>";
                        }

                        if (field.field_type == "DATEPICKER"){
                            formOutput += "<md-datepicker id='" + field.field_label + "' ng-model='" + field.field_label + "'" +  required + " ng-blur=\"flowController.checkGoToFieldConditions('"+field.field_label+"','"+formName+"')\"></md-datepicker>";
                        }

                        if (field.field_type == "TIMEPICKER"){
                            formOutput += "<mdp-time-picker id='" + field.field_label + "' ng-model='" + field.field_label + "'" +  required + " ng-blur=\"flowController.checkGoToFieldConditions('"+field.field_label+"','"+formName+"')\"></mdp-time-picker>";
                        }

                        if (field.field_type == "NAVIGATION"){
                            formOutput += "<div style='padding:0px;text-align:"+field.name_position+"!important;"+hidden+"'>";
                            formOutput += "<md-button id='" + field.field_label + "' class='md-raised md-primary' style='margin:10px 0px 0px 0px;width:" + field.field_size + "px;' ng-click=\"flowController.checkGoToPageConditions('"+formName+"',true,"+field.goto_page+",null,'"+field.field_pattern+"', null,'"+field.field_options+"');\">"+field.field_name+"</md-button>";
                            formOutput += '</div>'
                        }

                        if (field.field_type == "ACTION"){
                            formOutput += "<div style='padding:0px;text-align:"+field.name_position+"!important;"+hidden+"'>";

                            // if we're told to do a household lookup, setup the means to do so now
                            if (field.field_options=='HOUSEHOLD' && field.field_default){
                                // get the lookup field and search scope
                                var household_opts = field.field_default.split('~');

                                if (household_opts.length > 1){
                                    formOutput += "<md-select ng-model='household_dummy' style=\"display:none;\">"; // just to load our householdrecords array
                                    formOutput += "<md-option ng-repeat=\"item in flowController.getHouseholdingRecords('"+household_opts[0]+"','"+field.page+"','"+household_opts[1]+"','"+household_opts[2]+"')\">";
                                    formOutput += "</md-option>";
                                    formOutput += "</md-select>";

                                    formOutput += "<md-list style=\"width:100%\" flex-50 id='" + field.field_label + "'>";
                                    formOutput += "<md-subheader class=\"md-no-sticky\">Other records in the system that are similar to this contact will appear below. Simply click on the record you would like to work with to continue.</md-subheader>";
                                    formOutput += "<md-list-item style=\"color:#636161; font-size:13pt; max-width:100%;\" class=\"md-3-line\" ng-repeat=\"lead in flowController.householdingRecordsCurrentPage\">";
                                    formOutput += "<img style=\"width:88px;height:88px;\" ng-src=\"/flow/images/navigation/thumb-users.png\" class=\"md-avatar\" alt=\"{{lead.phoneNumber}}\" />";
                                    formOutput += "<div style=\"width:70%\" class=\"md-list-item-text\" layout=\"column\">";
                                    formOutput += "<h3>{{ lead.firstName }} {{ lead.lastName }} {{ lead.title }} {{ lead.company }}</h3>";
                                    formOutput += "<h4><span ng-show='lead.leadId > 0'>Phone: {{ lead.phoneNumber }}</span></h3>";
                                    formOutput += "<span style=\"text-align:left\" ng-show='lead.leadId > 0'><p>Record Id: {{ lead.leadId }}</p></span>";
                                    formOutput += "</div>";
                                    formOutput += "<md-select style=\"width:20%;margin-right:5%;\" placeholder='Apply a Disposition' ng-show='lead.leadId > 0' ng-model='household_dispo'>"; // allow to close out rec immediately
                                    formOutput += "<md-option value=\"\">Apply a Disposition</md-option>";
                                    formOutput += "<md-option ng-click=\"flowController.dispoHouseholdingRecord(lead.leadId,dispo.status,'"+household_opts[3]+"','"+household_opts[0]+"','"+household_opts[1]+"')\" ng-value=\"dispo.status\" ng-repeat=\"dispo in lead.dispos\">";
                                    formOutput += "{{dispo.status_name}}";
                                    formOutput += "</md-option>";
                                    formOutput += "</md-select>";
                                    formOutput += "<md-button  style=\"width:130px\" ng-show='lead.leadId > 0' style=\"height:36px;background-color:rgb(33, 130, 169);\" class=\"md-raised md-primary\" aria-label=\"Open Record\" ng-click=\"flowController.refreshToHouseholdingLead(lead.leadId)\">";
                                    formOutput += "Open Record";
                                    formOutput += "</md-button>";
                                    formOutput += "</md-list-item>";
                                    formOutput += "</md-list>";
                                    formOutput += "<!-- pager -->";
                                    formOutput += "<ul ng-if=\"flowController.householdingPager.pages.length\" class=\"pagination\">";
                                    formOutput += "    <li ng-class=\"{disabled:flowController.householdingPager.currentPage === 1}\">";
                                    formOutput += "        <a ng-click=\"flowController.householdingSetCurrentPage(1)\">First</a>";
                                    formOutput += "    </li>";
                                    formOutput += "    <li ng-class=\"{disabled:flowController.householdingPager.currentPage === 1}\">";
                                    formOutput += "        <a ng-click=\"flowController.householdingSetCurrentPage(flowController.householdingPager.currentPage - 1)\">Previous</a>";
                                    formOutput += "    </li>";
                                    formOutput += "    <li ng-repeat=\"page in flowController.householdingPager.pages\" ng-class=\"{active:flowController.householdingPager.currentPage === page}\">";
                                    formOutput += "        <a ng-click=\"flowController.householdingSetCurrentPage(page)\">{{page}}</a>";
                                    formOutput += "    </li>";
                                    formOutput += "    <li ng-class=\"{disabled:flowController.householdingPager.currentPage === flowController.householdingPager.totalPages}\">";
                                    formOutput += "        <a ng-click=\"flowController.householdingSetCurrentPage(flowController.householdingPager.currentPage + 1)\">Next</a>";
                                    formOutput += "    </li>";
                                    formOutput += "    <li ng-class=\"{disabled:flowController.householdingPager.currentPage === flowController.householdingPager.totalPages}\">";
                                    formOutput += "        <a ng-click=\"flowController.householdingSetCurrentPage(flowController.householdingPager.totalPages)\">Last</a>";
                                    formOutput += "    </li>";
                                    formOutput += "</ul>";
                                }
                            } else {
                                formOutput += "<md-button id='" + field.field_label + "' class='md-raised md-primary' style='margin:10px 0px 0px 0px;width:" + field.field_size + "px;' ng-click=\"flowController.checkGoToPageConditions('"+formName+"',false,"+field.goto_page+",'"+field.field_options+"','"+field.field_pattern+"','"+field.field_default+"');\">"+field.field_name+"</md-button>";
                            }
                            formOutput += '</div>';
                        }

                        if (isDataEntryField) {

                            // can't embed these in md-input-container
                            if (field.field_type != "DATEPICKER" && field.field_type != "TIMEPICKER") {

                                // block layout elements manage their own input container rendering
                                if (field.name_position!="block"){
                                    formOutput += '</md-input-container>';
                                }
                            }

                            formOutput += requiredMsg + minLengthMsg + maxLengthMsg + ngInputValidationMsg;
                            formOutput += '</div>'
                        }

                        if (field.field_type == "SCRIPT") {
                            // replace vars
                            if (field.field_options && field.field_options.length > 0){
                                if (Array.isArray(leadObj)){
                                    angular.forEach(leadObj, function(lead,l){
                                        var variableName = '[' + lead.Key + ']';
                                        if (field.field_options.indexOf(variableName) > -1){
                                            // track for data refreshing purposes
                                            if (flowController.scriptFieldsWithVariables.indexOf(field) == -1){
                                                field.field_options_orig = field.field_options;
                                                flowController.scriptFieldsWithVariables.push(field);
                                            }

                                            // if this field has options (e.g. checkbox, dropdown), show the Text, not the Value
                                            var lookupFieldText = '';
                                            var lookupFieldRef = null;
                                            try{
                                                angular.forEach(data, function(lookupField,ix){
                                                    if (lookupField.field_label == lead.Key){
                                                        lookupFieldRef = lookupField;

                                                        if (lookupField.field_type == "DROPDOWN" ||
                                                            lookupField.field_type == "MULTISELECTION" ||
                                                            lookupField.field_type == "RADIOBUTTON" ||
                                                            lookupField.field_type == "CHECKBOX"){

                                                            var lookupFieldOpts = '';
                                                            if (lookupField.field_options)
                                                                lookupFieldOpts = lookupField.field_options.split('\n');
                                                            var lookupFieldOptsIndex = 0;

                                                            while (lookupFieldOptsIndex < lookupFieldOpts.length)
                                                            {
                                                                var optKeyValue = lookupFieldOpts[lookupFieldOptsIndex].split('~');

                                                                if (optKeyValue.length == 2)
                                                                {
                                                                    if (Array.isArray(lead.Value) && lead.Value.length > 1){
                                                                        try{
                                                                            angular.forEach(lead.Value, function(arrayItem,idx){
                                                                                if (optKeyValue[0]==arrayItem) {
                                                                                    lookupFieldText += optKeyValue[1] + '<br />';
                                                                                    throw BreakException;
                                                                                }
                                                                            });
                                                                        } catch (e){
                                                                        }
                                                                    }
                                                                    else if (optKeyValue[0]==lead.Value) {
                                                                        lookupFieldText = optKeyValue[1];
                                                                        break;
                                                                    }
                                                                }

                                                                lookupFieldOptsIndex++;
                                                            }
                                                        }

                                                        throw BreakException;
                                                    }
                                                });
                                            } catch (e){
                                            }

                                            // if our script is referencing a text box, us ngBind to replace
                                            // the variable in our script. Just in case users change the data, ngBind will reflect that
                                            variableName = variableName.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
                                            if (lookupFieldRef && (lookupFieldRef.field_type=="TEXTFIELD" || lookupFieldRef.field_type=="TEXTAREA")){
                                                var bindTo = "<span ng-bind=\"" + lead.Key + "\"></span>";
                                                field.field_options = field.field_options.replace(new RegExp(variableName, 'g'), bindTo);
                                            } else {
                                                if (lookupFieldText==''){
                                                    field.field_options = field.field_options.replace(new RegExp(variableName, 'g'), lead.Value);
                                                } else {
                                                    field.field_options = field.field_options.replace(new RegExp(variableName, 'g'), lookupFieldText);
                                                }
                                            }
                                        }
                                    });
                                }
                                else {
                                    for (var key in leadObj) {
                                        var variableName = '[' + key + ']';
                                        if (field.field_options.indexOf(variableName) > -1){
                                            // track for data refreshing purposes
                                            if (flowController.scriptFieldsWithVariables.indexOf(field) == -1){
                                                field.field_options_orig = field.field_options;
                                                flowController.scriptFieldsWithVariables.push(field);
                                            }

                                            // if this field has options (e.g. checkbox, dropdown), show the Text, not the Value
                                            var lookupFieldText = '';
                                            var lookupFieldRef = null;
                                            try{
                                                angular.forEach(data, function(lookupField,ix){
                                                    if (lookupField.field_label == key){
                                                        lookupFieldRef = lookupField;

                                                        if (lookupField.field_type == "DROPDOWN" ||
                                                            lookupField.field_type == "MULTISELECTION" ||
                                                            lookupField.field_type == "RADIOBUTTON" ||
                                                            lookupField.field_type == "CHECKBOX"){

                                                            var lookupFieldOpts = '';
                                                            if (lookupField.field_options)
                                                                lookupFieldOpts = lookupField.field_options.split('\n');
                                                            var lookupFieldOptsIndex = 0;

                                                            while (lookupFieldOptsIndex < lookupFieldOpts.length)
                                                            {
                                                                var optKeyValue = lookupFieldOpts[lookupFieldOptsIndex].split('~');

                                                                if (optKeyValue.length == 2)
                                                                {
                                                                    if (Array.isArray(leadObj[key]) && leadObj[key].length > 1){
                                                                        try{
                                                                            angular.forEach(leadObj[key], function(arrayItem,idx){
                                                                                if (optKeyValue[0]==arrayItem) {
                                                                                    lookupFieldText += optKeyValue[1] + '<br />';
                                                                                    throw BreakException;
                                                                                }
                                                                            });
                                                                        } catch (e){
                                                                        }
                                                                    }
                                                                    else if (optKeyValue[0]==leadObj[key]) {
                                                                        lookupFieldText = optKeyValue[1];
                                                                        break;
                                                                    }
                                                                }

                                                                lookupFieldOptsIndex++;
                                                            }
                                                        }

                                                        throw BreakException;
                                                    }
                                                });
                                            } catch (e){
                                            }

                                            // if our script is referencing a text box, us ngBind to replace
                                            // the variable in our script. Just in case users change the data, ngBind will reflect that
                                            variableName = variableName.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
                                            if (lookupFieldRef && (lookupFieldRef.field_type=="TEXTFIELD" || lookupFieldRef.field_type=="TEXTAREA")){
                                                var bindTo = "<span ng-bind='" + key + "'></span>";
                                                field.field_options = field.field_options.replace(new RegExp(variableName, 'g'), bindTo);
                                            } else {
                                                if (lookupFieldText==''){
                                                    field.field_options = field.field_options.replace(new RegExp(variableName, 'g'), leadObj[key]);
                                                } else {
                                                    field.field_options = field.field_options.replace(new RegExp(variableName, 'g'), lookupFieldText);
                                                }
                                            }
                                        }
                                    }
                               }
                            }

                            if (field.field_options && field.field_options.length > 1){
                                field.field_options = $sce.trustAsHtml(field.field_options);
                            }
                            else
                                field.field_options = '';

                            formOutput += "<div style='padding:0px;text-align:"+field.name_position+"!important;"+hidden+"'>";
                            formOutput += "<div class='scriptVerbiage' id='" + field.field_label + "'>" + field.field_options + "</div>";
                            formOutput += '</div>';
                        }

                        // replace vars with data for IMAGE or iFRAME
                        if (field.field_type == "IFRAME" || field.field_type == "IMAGE") {
                            // replace any variables
                            if (field.field_default){
                                var variableSearch = '';
                                if (Array.isArray(leadObj)){
                                    angular.forEach(leadObj, function(lead,l){
                                        variableSearch = "@" + lead.Key.toLowerCase();
                                        if (field.field_default.toLowerCase().indexOf(variableSearch) > -1){
                                            field.field_default = field.field_default.toLowerCase().replace(variableSearch, lead.Value);
                                        }
                                    });
                                } else {
                                    for (var k in leadObj) {
                                        variableSearch = "@" + k.toLowerCase();
                                        if (field.field_default.toLowerCase().indexOf(variableSearch) > -1){
                                            field.field_default = field.field_default.toLowerCase().replace(variableSearch, leadObj[k]);
                                        }
                                    }
                                }
                            }
                            // end replace
                        }

                        if (field.field_type == "IMAGE") {
                            var imageSuffix = "px";
                            if (field.field_size && field.field_size.toString().indexOf("%") > -1)
                                imageSuffix = "";

                            var imageHSuffix = "px";
                            if (field.field_max && field.field_max.toString().indexOf("%") > -1)
                                imageHSuffix = "";

                            formOutput += "<div style='padding:0px;text-align:"+field.name_position+"!important'>";
                            formOutput += "<img src='"+field.field_default+"' id='" + field.field_label + "' style='width:" + field.field_size + imageSuffix + ";height:" + field.field_max + imageHSuffix + ";text-align:" + field.name_position + "' />";
                            formOutput += '</div>'
                        }

                        if (field.field_type == "IFRAME") {
                            var iframeSuffix = "px";
                            if (field.field_size && field.field_size.toString().indexOf("%") > -1)
                                iframeSuffix = "";

                            var iframeHSuffix = "px";
                            if (field.field_max && field.field_max.toString().indexOf("%") > -1)
                                iframeHSuffix = "";

                            field.field_default = flowController.getIFrameSrc(field.field_default);

                            if (field.field_options == "True"){ // stores whether to open in new window
                                formOutput += "<a id='openiFrameInNewWindow_" + field.page + "_" + field.field_label + "' style='text-align:"+field.name_position+"!important' href='"+field.field_default+"' target='_blank'>" + field.field_name + "</a>";
                            } else {
                                formOutput += "<iframe src='"+field.field_default+"' id='" + field.field_label + "' style='width:" + field.field_size + iframeSuffix + ";height:" + field.field_max + iframeHSuffix + ";';></iframe>";
                            }
                        }

                        if (field.field_type == "CALCULATION") {
                            var fieldOpts = field_options.split('|');
                            if (fieldOpts.length == 3) {
                                formOutput += "<input type='hidden' name='" + field.field_label + "' id='" + field.field_label + "' ng-model='" + field.field_label + "' />";
                            }
                        }

                        if (field.field_type == "SPACE") {
                            formOutput += "<div id='" + field.field_label + "' name='"+field.field_label+"' style='height:"+field.field_size+"px;'></div><br />";
                        }

                        if (field.field_type == "CONDITION") {
                            // nothing to do, handled by individual controls
                        }

                        divPageOutput += formOutput;

                    });
                }
                else {
                    divPageOutput += "Sorry, this Flow script hasn't been configured and is currently unavailable.";
                }


                divPageOutput += '</form></div>';

                var compiledOutput = $compile(divPageOutput)($scope);

                if (isPreview)
                    $('#flowFieldsPreview').append(compiledOutput);
                else
                    $('#flowFieldsRendered').append(compiledOutput);

                flowController.isLoading = false;

                // set flag to track oncall/offcall state
                flowController.onCall = true;

                // go to next page specified if coming from second request
                if (nextPageId && nextPageId > 0){
                    // setup our system flags for tracking second requests
                    if (secondRequest){
                        $scope["sys_repeat_new"] = secondRequest.isNewLead ? "true" : "false";
                        $scope["sys_repeat_existing"] = secondRequest.isNewLead ? "false" : "true";
                    } else {
                        $scope["sys_repeat_new"] = "false";
                        $scope["sys_repeat_existing"] = "false";
                    }
                    flowController.showFlowPage(nextPageId);
                }
                else
                    flowController.showFlowPage(firstPage);

            }, function (error){
                console.log(error);
            }
            );

        }, function (error){
            flowController.isLoading = false;
            console.log(error);
        });
    };

    // load email templates
    flowController.emailTemplates = [];

    dataService.getEmailTemplates()
        .then(function(response){

        flowController.emailTemplates = response.data;

    }, function (error){
        console.log(error);
    });

    // load acd queues
    flowController.acdQueues = [];

    dataService.getACDQueues(flowController.userId)
        .then(function(response){

        flowController.acdQueues = response.data;

    }, function (error){
        console.log(error);
    });

    // if we're in rendering mode, begin now
    if (window.location.href.indexOf('/view/') != -1){
        $('#page').css({'margin-top':'-43px'});
        $('#topmenu').css({'display':'none'});
        //$('body').removeAttr('style');
        //$('body').css({'background':'transparent'});
        $('#flowToolbar').css({'display':'none'});

        flowController.renderFlow(false);

        // keep an eye out for actions that occur outside of Flow
        $timeout(flowController.checkForNewCall, 700);
    }
});

flowApp.service('pagerService', function(){
    // service definition
    var service = {};

    service.GetPager = GetPager;

    return service;

    // service implementation
    function GetPager(totalItems, currentPage, pageSize) {
        // default to first page
        currentPage = currentPage || 1;

        // set default page size
        pageSize = pageSize || 1;
        pageSize = parseInt(pageSize);

        // calculate total pages
        var totalPages = Math.ceil(totalItems / pageSize);

        var startPage, endPage;
        if (totalPages <= 10) {
            // less than 10 total pages so show all
            startPage = 1;
            endPage = totalPages;
        } else {
            // more than 10 total pages so calculate start and end pages
            if (currentPage <= 6) {
                startPage = 1;
                endPage = 10;
            } else if (currentPage + 4 >= totalPages) {
                startPage = totalPages - 9;
                endPage = totalPages;
            } else {
                startPage = currentPage - 5;
                endPage = currentPage + 4;
            }
        }

        // calculate start and end item indexes
        var startIndex = (currentPage - 1) * pageSize;
        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);

        // create an array of pages to ng-repeat in the pager control
        var pages = _.range(startPage, endPage + 1);

        // return object with all pager properties required by the view
        return {
            totalItems: totalItems,
            currentPage: currentPage,
            pageSize: pageSize,
            totalPages: totalPages,
            startPage: startPage,
            endPage: endPage,
            startIndex: startIndex,
            endIndex: endIndex,
            pages: pages
        };
    }
});
